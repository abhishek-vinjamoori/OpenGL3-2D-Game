#include <iostream>
#include <cmath>
#include <fstream>
#include <vector>
#include <math.h>
#include <time.h>
#include <sys/time.h>
#include <GL/glew.h>
#include <GL/glu.h>
#include <GL/freeglut.h>

#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
#include <glm/gtx/transform.hpp>
#include <glm/gtc/matrix_transform.hpp>
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"










#include "SOIL/SOIL.h"
using namespace std;

GLuint eyes_open, eyes_closed, wheel1, wheel2, troll;


float scwidth = 1920;


/*GLuint loadImage1(string fileName) {
        GLuint tex_ID;

        tex_ID = SOIL_load_OGL_texture(
                fileName.c_str(),
                SOIL_LOAD_AUTO,
                SOIL_CREATE_NEW_ID,
                SOIL_FLAG_POWER_OF_TWO
                | SOIL_FLAG_MIPMAPS
                | SOIL_FLAG_MULTIPLY_ALPHA
                | SOIL_FLAG_COMPRESS_TO_DXT
                | SOIL_FLAG_DDS_LOAD_DIRECT
                | SOIL_FLAG_INVERT_Y
                );

        if( tex_ID > 0 ) {
                glEnable( GL_TEXTURE_2D );
                glBindTexture( GL_TEXTURE_2D, tex_ID );

                return tex_ID;
        }
        else {
                cout << "Bad image" << endl;
                return 0;
        }
}
*/












	
GLuint Texture_load(const char *);
void Texture_bind(GLuint, int);
void zoomin();
void zoomout();
void CheckCollisions();
void drawcoins(glm::mat4,glm::mat4 );

#define PI 3.14159265358979323846
struct timeval tv;
int curtime,initime;


struct vertices{
	float cx;
	float cy;
	float cradius;
};
typedef struct vertices vertices;

class VAO {
	public:
	    GLuint VertexArrayID;
	    GLuint VertexBuffer;
	    GLuint ColorBuffer;

	    GLenum PrimitiveMode;
	    GLenum FillMode;
	    int NumVertices;
	    float xvel;
	    float yvel;
	    float mass;
	    /*vertices mypos;*/
	    float cx;
	    float cy;
	    float cradius;
	    int vis;
        int life;
	    VAO(){

	    }

};

struct GLMatrices {
	glm::mat4 projection;
	glm::mat4 model;
	glm::mat4 view;
	GLuint MatrixID;
} Matrices;

GLuint programID,backgroundid,wheelid;

/* Function to load Shaders - Use it as it is */
GLuint LoadShaders(const char * vertex_file_path,const char * fragment_file_path) {

	// Create the shaders
	GLuint VertexShaderID = glCreateShader(GL_VERTEX_SHADER);
	GLuint FragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);

	// Read the Vertex Shader code from the file
	std::string VertexShaderCode;
	std::ifstream VertexShaderStream(vertex_file_path, std::ios::in);
	if(VertexShaderStream.is_open())
	{
		std::string Line = "";
		while(getline(VertexShaderStream, Line))
			VertexShaderCode += "\n" + Line;
		VertexShaderStream.close();
	}

	// Read the Fragment Shader code from the file
	std::string FragmentShaderCode;
	std::ifstream FragmentShaderStream(fragment_file_path, std::ios::in);
	if(FragmentShaderStream.is_open()){
		std::string Line = "";
		while(getline(FragmentShaderStream, Line))
			FragmentShaderCode += "\n" + Line;
		FragmentShaderStream.close();
	}

	GLint Result = GL_FALSE;
	int InfoLogLength;

	// Compile Vertex Shader
	printf("Compiling shader : %s\n", vertex_file_path);
	char const * VertexSourcePointer = VertexShaderCode.c_str();
	glShaderSource(VertexShaderID, 1, &VertexSourcePointer , NULL);
	glCompileShader(VertexShaderID);

	// Check Vertex Shader
	glGetShaderiv(VertexShaderID, GL_COMPILE_STATUS, &Result);
	glGetShaderiv(VertexShaderID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> VertexShaderErrorMessage(InfoLogLength);
	glGetShaderInfoLog(VertexShaderID, InfoLogLength, NULL, &VertexShaderErrorMessage[0]);
	fprintf(stdout, "%s\n", &VertexShaderErrorMessage[0]);

	// Compile Fragment Shader
	printf("Compiling shader : %s\n", fragment_file_path);
	char const * FragmentSourcePointer = FragmentShaderCode.c_str();
	glShaderSource(FragmentShaderID, 1, &FragmentSourcePointer , NULL);
	glCompileShader(FragmentShaderID);

	// Check Fragment Shader
	glGetShaderiv(FragmentShaderID, GL_COMPILE_STATUS, &Result);
	glGetShaderiv(FragmentShaderID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> FragmentShaderErrorMessage(InfoLogLength);
	glGetShaderInfoLog(FragmentShaderID, InfoLogLength, NULL, &FragmentShaderErrorMessage[0]);
	fprintf(stdout, "%s\n", &FragmentShaderErrorMessage[0]);

	// Link the program
	fprintf(stdout, "Linking program\n");
	GLuint ProgramID = glCreateProgram();
	glAttachShader(ProgramID, VertexShaderID);
	glAttachShader(ProgramID, FragmentShaderID);
	glLinkProgram(ProgramID);

	// Check the program
	glGetProgramiv(ProgramID, GL_LINK_STATUS, &Result);
	glGetProgramiv(ProgramID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> ProgramErrorMessage( max(InfoLogLength, int(1)) );
	glGetProgramInfoLog(ProgramID, InfoLogLength, NULL, &ProgramErrorMessage[0]);
	fprintf(stdout, "%s\n", &ProgramErrorMessage[0]);

	glDeleteShader(VertexShaderID);
	glDeleteShader(FragmentShaderID);

	return ProgramID;
}

/* Generate VAO, VBOs and return VAO handle */
VAO* create3DObject (GLenum primitive_mode, int numVertices, const GLfloat* vertex_buffer_data, const GLfloat* color_buffer_data, float cx, float cy, float cradius,GLenum fill_mode=GL_FILL)
{
    VAO* vao = new VAO();
    vao->PrimitiveMode = primitive_mode;
    vao->NumVertices = numVertices;
    vao->FillMode = fill_mode;
    vao->cx = cx;
	vao->cy = cy;
	vao->cradius = cradius;

    // Create Vertex Array Object
    glGenVertexArrays(1, &(vao->VertexArrayID)); // VAO
    glGenBuffers (1, &(vao->VertexBuffer)); // VBO - vertices
    glGenBuffers (1, &(vao->ColorBuffer));  // VBO - colors

    glBindVertexArray (vao->VertexArrayID); // Bind the VAO 
    glBindBuffer (GL_ARRAY_BUFFER, vao->VertexBuffer); // Bind the VBO vertices 
    glBufferData (GL_ARRAY_BUFFER, 3*numVertices*sizeof(GLfloat), vertex_buffer_data, GL_STATIC_DRAW); // Copy the vertices into VBO
    glVertexAttribPointer(
                          0,                  // attribute 0. Vertices
                          3,                  // size (x,y,z)
                          GL_FLOAT,           // type
                          GL_FALSE,           // normalized?
                          0,                  // stride
                          (void*)0            // array buffer offset
                          );

    glBindBuffer (GL_ARRAY_BUFFER, vao->ColorBuffer); // Bind the VBO colors 
    glBufferData (GL_ARRAY_BUFFER, 3*numVertices*sizeof(GLfloat), color_buffer_data, GL_STATIC_DRAW);  // Copy the vertex colors
    glVertexAttribPointer(
                          1,                  // attribute 1. Color
                          3,                  // size (r,g,b)
                          GL_FLOAT,           // type
                          GL_FALSE,           // normalized?
                          0,                  // stride
                          (void*)0            // array buffer offset
                          );

    return vao;
}

/* Generate VAO, VBOs and return VAO handle - Common Color for all vertices */
VAO* create3DObject (GLenum primitive_mode, int numVertices, const GLfloat* vertex_buffer_data, const GLfloat red, const GLfloat green, const GLfloat blue, float cx, float cy, float cradius,GLenum fill_mode=GL_FILL)
{
    GLfloat* color_buffer_data = new GLfloat [3*numVertices];
    for (int i=0; i<numVertices; i++) {
        color_buffer_data [3*i] = red;
        color_buffer_data [3*i + 1] = green;
        color_buffer_data [3*i + 2] = blue;
    }

    return create3DObject(primitive_mode, numVertices, vertex_buffer_data, color_buffer_data, cx, cy, cradius,fill_mode);
}

/* Render the VBOs handled by VAO */
void draw3DObject (VAO* vao)
{
    // Change the Fill Mode for this object
    //glPolygonMode (GL_FRONT_AND_BACK, vao->FillMode);

    // Bind the VAO to use
    glBindVertexArray (vao->VertexArrayID);

    // Enable Vertex Attribute 0 - 3d Vertices
    glEnableVertexAttribArray(0);
    // Bind the VBO to use
    glBindBuffer(GL_ARRAY_BUFFER, vao->VertexBuffer);

    // Enable Vertex Attribute 1 - Color
    glEnableVertexAttribArray(1);
    // Bind the VBO to use
    glBindBuffer(GL_ARRAY_BUFFER, vao->ColorBuffer);

    // Draw the geometry !
    glDrawArrays(vao->PrimitiveMode, 0, vao->NumVertices); // Starting from vertex 0; 3 vertices total -> 1 triangle
}

/**************************
 * Customizable functions *
 **************************/

float triangle_rot_dir = 1;
float rectangle_rot_dir = 1;
bool triangle_rot_status = true;
bool rectangle_rot_status = true;
float angle=0;
float power=0,initpower=0;
int powerstate=0; //0:Released state
		  //1:Pressed State
float vx=0,vy=0,force=0.35;
float brickrot=0,finalrotation=0;
int score=0;
int level=0;


/* Executed when a regular key is pressed */
void keyboardDown (unsigned char key, int x, int y)
{
    switch (key) {
        case 'Q':
        case 'q':
        case 27: //ESC
            exit (0);
		case ' ':
			powerstate=1;
			power+=0.1;
			if(power>=2.25)
			{
				power-=0.1;
			}
			if(powerstate==0)
			{
				power=0;
			}
			break;
        default:
            break;
    }
}

/* Executed when a regular key is released */
void keyboardUp (unsigned char key, int x, int y)
{
    switch (key) {
        case 'c':
        case 'C':
        	cout << "Calling" <<endl;
            scwidth-=10;
            Matrices.projection = glm::ortho(-scwidth/180.0f, 1920/180.0f, -6.0f, 6.0f, 0.1f, 500.0f);
            break;
        case 'p':
        case 'P':
            scwidth+=10000;
            break;
		case ' ':
			powerstate=2;
			break;
        default:
            break;
    }
}

/* Executed when a special key is pressed */
void keyboardSpecialDown (int key, int x, int y)
{
	switch(key)
	{
		case GLUT_KEY_LEFT:
			angle+=1;
			break;
		case GLUT_KEY_RIGHT:
			angle-=1;
			break;

		default:
			break;

	}
}

/* Executed when a special key is released */
void keyboardSpecialUp (int key, int x, int y)
{
	switch(key)
	{
		case GLUT_KEY_LEFT:
			break;
		default:
			break;

	}
}

/* Executed when a mouse button 'button' is put into state 'state'
 at screen position ('x', 'y')
 */
void mouseClick (int button, int state, int x, int y)
{
    switch (button) {
        case GLUT_LEFT_BUTTON:
            if (state == GLUT_UP)
                triangle_rot_dir *= -1;
            break;
        case GLUT_RIGHT_BUTTON:
            if (state == GLUT_UP) {
                rectangle_rot_dir *= -1;
            }
            break;
        case 3:
		case 4:
			if (state == GLUT_UP) return;
			if(button==3)
			{
				zoomin();
			}
			else
			{
				zoomout();
			}
			printf("Scroll %s At %d %d\n", (button == 3) ? "Up" : "Down", x, y);        	
        default:
            break;
    }
}

/* Executed when the mouse moves to position ('x', 'y') */
void mouseMotion (int x, int y)
{

}


/* Executed when window is resized to 'width' and 'height' */
/* Modify the bounds of the screen here in glm::ortho or Field of View in glm::Perspective */
void reshapeWindow (int width, int height)
{
	GLfloat fov = 90.0f;

	// sets the viewport of openGL renderer
	glViewport (0, 0, (GLsizei) width, (GLsizei) height);

	// set the projection matrix as perspective/ortho
	// Store the projection matrix in a variable for future use

    // Perspective projection for 3D views
    // Matrices.projection = glm::perspective (fov, (GLfloat) width / (GLfloat) height, 0.1f, 500.0f);

    // Ortho projection for 2D views
    Matrices.projection = glm::ortho(-scwidth/180.0f, width/180.0f, -height/180.0f, height/180.0f, 0.1f, 500.0f);
}

VAO *triangle, *rectangle[3],*square,*line,*circle[100];
VAO *bricks[100];

// Creates the triangle object used in this sample code
void createTriangle ()
{
  /* ONLY vertices between the bounds specified in glm::ortho will be visible on screen */

  /* Define vertex array as used in glBegin (GL_TRIANGLES) */
  static const GLfloat vertex_buffer_data [] = {
    0, 1,0, // vertex 0
    -1,-1,0, // vertex 1
    1,-1,0, // vertex 2
  };

  static const GLfloat color_buffer_data [] = {
    0,0,0, // color 0
    0,0,0, // color 1
    0,0,0, // color 2
  };

  // create3DObject creates and returns a handle to a VAO that can be used later
  triangle = create3DObject(GL_TRIANGLES, 3, vertex_buffer_data, color_buffer_data, GL_LINE,0,0,1);
}

void createRectangle ()
{
  // GL3 accepts only Triangles. Quads are not supported static
  const GLfloat vertex_buffer_data [] = 
  {
    -1.2,-1.2,0, // vertex 1
    1.2,-1.2,0, // vertex 2
    1.2, 1.2,0, // vertex 3

    1.2, 1.2,0, // vertex 3
    -1.2, 1.2,0, // vertex 4
    -1.2,-1.2,0  // vertex 1
  };

  static const GLfloat color_buffer_data [] = 
  {
    1,0,0, // color 1
    0,0,1, // color 2
    0,1,0, // color 3

    0,1,0, // color 3
    0.3,0.3,0.3, // color 4
    1,0,0  // color 1
  };



  // create3DObject creates and returns a handle to a VAO that can be used later
  rectangle[0] = create3DObject(GL_TRIANGLES, 6, vertex_buffer_data, color_buffer_data, GL_FILL,0,0,1.5);
  
	static const GLfloat color_buffer_datas [] = {
    	0.571867 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.464037 ,0.000000,0.000000,
0.464037 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.356183 ,0.000000,0.000000,
0.356183 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.248323 ,0.000000,0.000000,
0.248323 ,0.000000,0.000000,
0.147786 ,0.000000,0.000000,
0.140482 ,0.000000,0.000000,
0.571885 ,0.000000,0.000000,
0.470488 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.149533 ,0.000000,0.000000,
0.147786 ,0.000000,0.000000,
0.571937 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.470488 ,0.000000,0.000000,
0.470488 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.170327 ,0.000000,0.000000,
0.149533 ,0.000000,0.000000,
0.572033 ,0.000000,0.000000,
0.484424 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.404661 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.316485 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.187514 ,0.000000,0.000000,
0.170327 ,0.000000,0.000000,
0.571867 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.571885 ,0.000000,0.000000,
0.464037 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.356183 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.248323 ,0.000000,0.000000,
0.147786 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.571885 ,0.000000,0.000000,
0.470489 ,0.000000,0.000000,
0.571937 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.470489 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.149533 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.571937 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.572033 ,0.000000,0.000000,
0.470489 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.170327 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.572033 ,0.000000,0.000000,
0.484424 ,0.000000,0.000000,
0.572168 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.404661 ,0.000000,0.000000,
0.484424 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.316485 ,0.000000,0.000000,
0.404661 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.187514 ,0.000000,0.000000,
0.316485 ,0.000000,0.000000,
0.571867 ,0.000000,0.000000,
0.571885 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.464037 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.356183 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.248323 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.147786 ,0.000000,0.000000,
0.571885 ,0.000000,0.000000,
0.571937 ,0.000000,0.000000,
0.470488 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.470488 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.149533 ,0.000000,0.000000,
0.571937 ,0.000000,0.000000,
0.572033 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.470488 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.170327 ,0.000000,0.000000,
0.572033 ,0.000000,0.000000,
0.572168 ,0.000000,0.000000,
0.484424 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.484424 ,0.000000,0.000000,
0.404661 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.404661 ,0.000000,0.000000,
0.316485 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.316485 ,0.000000,0.000000,
0.187514 ,0.000000,0.000000,
0.571867 ,0.000000,0.000000,
0.464037 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.464037 ,0.000000,0.000000,
0.356183 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.356183 ,0.000000,0.000000,
0.248323 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.248323 ,0.000000,0.000000,
0.140482 ,0.000000,0.000000,
0.147786 ,0.000000,0.000000,
0.571885 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.470489 ,0.000000,0.000000,
0.465875 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.359839 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.253800 ,0.000000,0.000000,
0.147786 ,0.000000,0.000000,
0.149533 ,0.000000,0.000000,
0.571937 ,0.000000,0.000000,
0.470489 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.470489 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.369439 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.269320 ,0.000000,0.000000,
0.149533 ,0.000000,0.000000,
0.170327 ,0.000000,0.000000,
0.572033 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.484424 ,0.000000,0.000000,
0.476964 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.404661 ,0.000000,0.000000,
0.383733 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.316485 ,0.000000,0.000000,
0.280443 ,0.000000,0.000000,
0.170327 ,0.000000,0.000000,
0.187514 ,0.000000,0.000000,
0.561142 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.560841 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.945494 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.561142 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.992528 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.945494 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.561142 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.992528 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.945494 ,0.000000,0.000000,
0.561142 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.560841 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.945494 ,0.000000,0.000000,
0.564345 ,0.000000,0.000000,
0.452964 ,0.000000,0.000000,
0.456510 ,0.000000,0.000000,
0.456510 ,0.000000,0.000000,
0.347188 ,0.000000,0.000000,
0.348682 ,0.000000,0.000000,
0.348682 ,0.000000,0.000000,
0.241525 ,0.000000,0.000000,
0.240871 ,0.000000,0.000000,
0.240871 ,0.000000,0.000000,
0.135950 ,0.000000,0.000000,
0.133096 ,0.000000,0.000000,
0.558880 ,0.000000,0.000000,
0.452164 ,0.000000,0.000000,
0.452964 ,0.000000,0.000000,
0.452964 ,0.000000,0.000000,
0.351637 ,0.000000,0.000000,
0.347188 ,0.000000,0.000000,
0.347188 ,0.000000,0.000000,
0.252294 ,0.000000,0.000000,
0.241525 ,0.000000,0.000000,
0.241525 ,0.000000,0.000000,
0.133095 ,0.000000,0.000000,
0.135950 ,0.000000,0.000000,
0.553416 ,0.000000,0.000000,
0.453196 ,0.000000,0.000000,
0.452164 ,0.000000,0.000000,
0.452164 ,0.000000,0.000000,
0.360807 ,0.000000,0.000000,
0.351637 ,0.000000,0.000000,
0.351637 ,0.000000,0.000000,
0.257501 ,0.000000,0.000000,
0.252294 ,0.000000,0.000000,
0.252294 ,0.000000,0.000000,
0.149523 ,0.000000,0.000000,
0.133095 ,0.000000,0.000000,
0.547954 ,0.000000,0.000000,
0.455188 ,0.000000,0.000000,
0.453196 ,0.000000,0.000000,
0.453196 ,0.000000,0.000000,
0.375607 ,0.000000,0.000000,
0.360807 ,0.000000,0.000000,
0.360807 ,0.000000,0.000000,
0.288361 ,0.000000,0.000000,
0.257501 ,0.000000,0.000000,
0.257501 ,0.000000,0.000000,
0.160081 ,0.000000,0.000000,
0.149523 ,0.000000,0.000000,
0.564345 ,0.000000,0.000000,
0.664982 ,0.000000,0.000000,
0.558880 ,0.000000,0.000000,
0.672179 ,0.000000,0.000000,
0.771222 ,0.000000,0.000000,
0.664982 ,0.000000,0.000000,
0.780008 ,0.000000,0.000000,
0.877537 ,0.000000,0.000000,
0.771222 ,0.000000,0.000000,
0.887818 ,0.000000,0.000000,
0.983855 ,0.000000,0.000000,
0.877537 ,0.000000,0.000000,
0.558880 ,0.000000,0.000000,
0.655040 ,0.000000,0.000000,
0.553416 ,0.000000,0.000000,
0.664982 ,0.000000,0.000000,
0.756538 ,0.000000,0.000000,
0.655040 ,0.000000,0.000000,
0.771222 ,0.000000,0.000000,
0.857322 ,0.000000,0.000000,
0.756538 ,0.000000,0.000000,
0.877537 ,0.000000,0.000000,
0.977538 ,0.000000,0.000000,
0.857322 ,0.000000,0.000000,
0.553416 ,0.000000,0.000000,
0.643264 ,0.000000,0.000000,
0.547954 ,0.000000,0.000000,
0.655040 ,0.000000,0.000000,
0.737229 ,0.000000,0.000000,
0.643264 ,0.000000,0.000000,
0.756538 ,0.000000,0.000000,
0.840383 ,0.000000,0.000000,
0.737229 ,0.000000,0.000000,
0.857322 ,0.000000,0.000000,
0.952456 ,0.000000,0.000000,
0.840383 ,0.000000,0.000000,
0.547954 ,0.000000,0.000000,
0.630534 ,0.000000,0.000000,
0.542491 ,0.000000,0.000000,
0.643264 ,0.000000,0.000000,
0.710357 ,0.000000,0.000000,
0.630534 ,0.000000,0.000000,
0.737229 ,0.000000,0.000000,
0.799311 ,0.000000,0.000000,
0.710357 ,0.000000,0.000000,
0.840383 ,0.000000,0.000000,
0.928767 ,0.000000,0.000000,
0.799311 ,0.000000,0.000000,
0.564345 ,0.000000,0.000000,
0.463706 ,0.000000,0.000000,
0.569809 ,0.000000,0.000000,
0.456510 ,0.000000,0.000000,
0.357467 ,0.000000,0.000000,
0.463706 ,0.000000,0.000000,
0.348682 ,0.000000,0.000000,
0.251153 ,0.000000,0.000000,
0.357467 ,0.000000,0.000000,
0.240871 ,0.000000,0.000000,
0.144833 ,0.000000,0.000000,
0.251153 ,0.000000,0.000000,
0.569809 ,0.000000,0.000000,
0.473650 ,0.000000,0.000000,
0.575272 ,0.000000,0.000000,
0.463706 ,0.000000,0.000000,
0.372152 ,0.000000,0.000000,
0.473650 ,0.000000,0.000000,
0.357467 ,0.000000,0.000000,
0.271367 ,0.000000,0.000000,
0.372152 ,0.000000,0.000000,
0.251153 ,0.000000,0.000000,
0.151151 ,0.000000,0.000000,
0.271367 ,0.000000,0.000000,
0.575272 ,0.000000,0.000000,
0.485425 ,0.000000,0.000000,
0.580736 ,0.000000,0.000000,
0.473650 ,0.000000,0.000000,
0.391460 ,0.000000,0.000000,
0.485425 ,0.000000,0.000000,
0.372152 ,0.000000,0.000000,
0.288306 ,0.000000,0.000000,
0.391460 ,0.000000,0.000000,
0.271367 ,0.000000,0.000000,
0.176234 ,0.000000,0.000000,
0.288306 ,0.000000,0.000000,
0.580736 ,0.000000,0.000000,
0.498155 ,0.000000,0.000000,
0.586198 ,0.000000,0.000000,
0.485425 ,0.000000,0.000000,
0.418332 ,0.000000,0.000000,
0.498155 ,0.000000,0.000000,
0.391460 ,0.000000,0.000000,
0.329379 ,0.000000,0.000000,
0.418332 ,0.000000,0.000000,
0.288306 ,0.000000,0.000000,
0.199921 ,0.000000,0.000000,
0.329379 ,0.000000,0.000000,
0.564345 ,0.000000,0.000000,
0.675725 ,0.000000,0.000000,
0.672179 ,0.000000,0.000000,
0.672179 ,0.000000,0.000000,
0.781501 ,0.000000,0.000000,
0.780008 ,0.000000,0.000000,
0.780008 ,0.000000,0.000000,
0.887165 ,0.000000,0.000000,
0.887818 ,0.000000,0.000000,
0.887818 ,0.000000,0.000000,
0.992740 ,0.000000,0.000000,
0.995594 ,0.000000,0.000000,
0.569809 ,0.000000,0.000000,
0.676526 ,0.000000,0.000000,
0.675725 ,0.000000,0.000000,
0.675725 ,0.000000,0.000000,
0.777053 ,0.000000,0.000000,
0.781501 ,0.000000,0.000000,
0.781501 ,0.000000,0.000000,
0.876394 ,0.000000,0.000000,
0.887165 ,0.000000,0.000000,
0.887165 ,0.000000,0.000000,
0.995594 ,0.000000,0.000000,
0.992740 ,0.000000,0.000000,
0.575272 ,0.000000,0.000000,
0.675494 ,0.000000,0.000000,
0.676526 ,0.000000,0.000000,
0.676526 ,0.000000,0.000000,
0.767883 ,0.000000,0.000000,
0.777053 ,0.000000,0.000000,
0.777053 ,0.000000,0.000000,
0.871189 ,0.000000,0.000000,
0.876394 ,0.000000,0.000000,
0.876394 ,0.000000,0.000000,
0.979166 ,0.000000,0.000000,
0.995594 ,0.000000,0.000000,
0.580736 ,0.000000,0.000000,
0.673501 ,0.000000,0.000000,
0.675494 ,0.000000,0.000000,
0.675494 ,0.000000,0.000000,
0.753081 ,0.000000,0.000000,
0.767883 ,0.000000,0.000000,
0.767883 ,0.000000,0.000000,
0.840327 ,0.000000,0.000000,
0.871189 ,0.000000,0.000000,
0.871189 ,0.000000,0.000000,
0.968608 ,0.000000,0.000000,
0.979166 ,0.000000,0.000000,
0.564345 ,0.000000,0.000000,
0.558880 ,0.000000,0.000000,
0.452964 ,0.000000,0.000000,
0.456510 ,0.000000,0.000000,
0.452964 ,0.000000,0.000000,
0.347188 ,0.000000,0.000000,
0.348682 ,0.000000,0.000000,
0.347188 ,0.000000,0.000000,
0.241525 ,0.000000,0.000000,
0.240871 ,0.000000,0.000000,
0.241525 ,0.000000,0.000000,
0.135950 ,0.000000,0.000000,
0.558880 ,0.000000,0.000000,
0.553416 ,0.000000,0.000000,
0.452164 ,0.000000,0.000000,
0.452964 ,0.000000,0.000000,
0.452164 ,0.000000,0.000000,
0.351637 ,0.000000,0.000000,
0.347188 ,0.000000,0.000000,
0.351637 ,0.000000,0.000000,
0.252294 ,0.000000,0.000000,
0.241525 ,0.000000,0.000000,
0.252294 ,0.000000,0.000000,
0.133095 ,0.000000,0.000000,
0.553416 ,0.000000,0.000000,
0.547954 ,0.000000,0.000000,
0.453196 ,0.000000,0.000000,
0.452164 ,0.000000,0.000000,
0.453196 ,0.000000,0.000000,
0.360807 ,0.000000,0.000000,
0.351637 ,0.000000,0.000000,
0.360807 ,0.000000,0.000000,
0.257501 ,0.000000,0.000000,
0.252294 ,0.000000,0.000000,
0.257501 ,0.000000,0.000000,
0.149523 ,0.000000,0.000000,
0.547954 ,0.000000,0.000000,
0.542491 ,0.000000,0.000000,
0.455188 ,0.000000,0.000000,
0.453196 ,0.000000,0.000000,
0.455188 ,0.000000,0.000000,
0.375607 ,0.000000,0.000000,
0.360807 ,0.000000,0.000000,
0.375607 ,0.000000,0.000000,
0.288361 ,0.000000,0.000000,
0.257501 ,0.000000,0.000000,
0.288361 ,0.000000,0.000000,
0.160081 ,0.000000,0.000000,
0.564345 ,0.000000,0.000000,
0.672179 ,0.000000,0.000000,
0.664982 ,0.000000,0.000000,
0.672179 ,0.000000,0.000000,
0.780008 ,0.000000,0.000000,
0.771222 ,0.000000,0.000000,
0.780008 ,0.000000,0.000000,
0.887818 ,0.000000,0.000000,
0.877537 ,0.000000,0.000000,
0.887818 ,0.000000,0.000000,
0.995594 ,0.000000,0.000000,
0.983855 ,0.000000,0.000000,
0.558880 ,0.000000,0.000000,
0.664982 ,0.000000,0.000000,
0.655040 ,0.000000,0.000000,
0.664982 ,0.000000,0.000000,
0.771222 ,0.000000,0.000000,
0.756538 ,0.000000,0.000000,
0.771222 ,0.000000,0.000000,
0.877537 ,0.000000,0.000000,
0.857322 ,0.000000,0.000000,
0.877537 ,0.000000,0.000000,
0.983855 ,0.000000,0.000000,
0.977538 ,0.000000,0.000000,
0.553416 ,0.000000,0.000000,
0.655040 ,0.000000,0.000000,
0.643264 ,0.000000,0.000000,
0.655040 ,0.000000,0.000000,
0.756538 ,0.000000,0.000000,
0.737229 ,0.000000,0.000000,
0.756538 ,0.000000,0.000000,
0.857322 ,0.000000,0.000000,
0.840383 ,0.000000,0.000000,
0.857322 ,0.000000,0.000000,
0.977538 ,0.000000,0.000000,
0.952456 ,0.000000,0.000000,
0.547954 ,0.000000,0.000000,
0.643264 ,0.000000,0.000000,
0.630534 ,0.000000,0.000000,
0.643264 ,0.000000,0.000000,
0.737229 ,0.000000,0.000000,
0.710357 ,0.000000,0.000000,
0.737229 ,0.000000,0.000000,
0.840383 ,0.000000,0.000000,
0.799311 ,0.000000,0.000000,
0.840383 ,0.000000,0.000000,
0.952456 ,0.000000,0.000000,
0.928767 ,0.000000,0.000000,
0.564345 ,0.000000,0.000000,
0.456510 ,0.000000,0.000000,
0.463706 ,0.000000,0.000000,
0.456510 ,0.000000,0.000000,
0.348682 ,0.000000,0.000000,
0.357467 ,0.000000,0.000000,
0.348682 ,0.000000,0.000000,
0.240871 ,0.000000,0.000000,
0.251153 ,0.000000,0.000000,
0.240871 ,0.000000,0.000000,
0.133096 ,0.000000,0.000000,
0.144833 ,0.000000,0.000000,
0.569809 ,0.000000,0.000000,
0.463706 ,0.000000,0.000000,
0.473650 ,0.000000,0.000000,
0.463706 ,0.000000,0.000000,
0.357467 ,0.000000,0.000000,
0.372152 ,0.000000,0.000000,
0.357467 ,0.000000,0.000000,
0.251153 ,0.000000,0.000000,
0.271367 ,0.000000,0.000000,
0.251153 ,0.000000,0.000000,
0.144833 ,0.000000,0.000000,
0.151151 ,0.000000,0.000000,
0.575272 ,0.000000,0.000000,
0.473650 ,0.000000,0.000000,
0.485425 ,0.000000,0.000000,
0.473650 ,0.000000,0.000000,
0.372152 ,0.000000,0.000000,
0.391460 ,0.000000,0.000000,
0.372152 ,0.000000,0.000000,
0.271367 ,0.000000,0.000000,
0.288306 ,0.000000,0.000000,
0.271367 ,0.000000,0.000000,
0.151151 ,0.000000,0.000000,
0.176234 ,0.000000,0.000000,
0.580736 ,0.000000,0.000000,
0.485425 ,0.000000,0.000000,
0.498155 ,0.000000,0.000000,
0.485425 ,0.000000,0.000000,
0.391460 ,0.000000,0.000000,
0.418332 ,0.000000,0.000000,
0.391460 ,0.000000,0.000000,
0.288306 ,0.000000,0.000000,
0.329379 ,0.000000,0.000000,
0.288306 ,0.000000,0.000000,
0.176234 ,0.000000,0.000000,
0.199921 ,0.000000,0.000000,
0.564345 ,0.000000,0.000000,
0.569809 ,0.000000,0.000000,
0.675725 ,0.000000,0.000000,
0.672179 ,0.000000,0.000000,
0.675725 ,0.000000,0.000000,
0.781501 ,0.000000,0.000000,
0.780008 ,0.000000,0.000000,
0.781501 ,0.000000,0.000000,
0.887165 ,0.000000,0.000000,
0.887818 ,0.000000,0.000000,
0.887165 ,0.000000,0.000000,
0.992740 ,0.000000,0.000000,
0.569809 ,0.000000,0.000000,
0.575272 ,0.000000,0.000000,
0.676526 ,0.000000,0.000000,
0.675725 ,0.000000,0.000000,
0.676526 ,0.000000,0.000000,
0.777053 ,0.000000,0.000000,
0.781501 ,0.000000,0.000000,
0.777053 ,0.000000,0.000000,
0.876394 ,0.000000,0.000000,
0.887165 ,0.000000,0.000000,
0.876394 ,0.000000,0.000000,
0.995594 ,0.000000,0.000000,
0.575272 ,0.000000,0.000000,
0.580736 ,0.000000,0.000000,
0.675494 ,0.000000,0.000000,
0.676526 ,0.000000,0.000000,
0.675494 ,0.000000,0.000000,
0.767883 ,0.000000,0.000000,
0.777053 ,0.000000,0.000000,
0.767883 ,0.000000,0.000000,
0.871189 ,0.000000,0.000000,
0.876394 ,0.000000,0.000000,
0.871189 ,0.000000,0.000000,
0.979166 ,0.000000,0.000000,
0.580736 ,0.000000,0.000000,
0.586198 ,0.000000,0.000000,
0.673501 ,0.000000,0.000000,
0.675494 ,0.000000,0.000000,
0.673501 ,0.000000,0.000000,
0.753081 ,0.000000,0.000000,
0.767883 ,0.000000,0.000000,
0.753081 ,0.000000,0.000000,
0.840327 ,0.000000,0.000000,
0.871189 ,0.000000,0.000000,
0.840327 ,0.000000,0.000000,
0.968608 ,0.000000,0.000000,
0.576113 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.468282 ,0.000000,0.000000,
0.468282 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.360428 ,0.000000,0.000000,
0.360428 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.252569 ,0.000000,0.000000,
0.252569 ,0.000000,0.000000,
0.152031 ,0.000000,0.000000,
0.144727 ,0.000000,0.000000,
0.576131 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.153779 ,0.000000,0.000000,
0.152031 ,0.000000,0.000000,
0.576183 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.174572 ,0.000000,0.000000,
0.153779 ,0.000000,0.000000,
0.576278 ,0.000000,0.000000,
0.488670 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.408907 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.320731 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.191761 ,0.000000,0.000000,
0.174572 ,0.000000,0.000000,
0.576113 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.576131 ,0.000000,0.000000,
0.468282 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.360428 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.252569 ,0.000000,0.000000,
0.152031 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.576131 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.576183 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.153779 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.576183 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.576278 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.174572 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.576278 ,0.000000,0.000000,
0.488670 ,0.000000,0.000000,
0.576414 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.408907 ,0.000000,0.000000,
0.488670 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.320731 ,0.000000,0.000000,
0.408907 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.191761 ,0.000000,0.000000,
0.320731 ,0.000000,0.000000,
0.576113 ,0.000000,0.000000,
0.576131 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.468282 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.360428 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.252569 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.152031 ,0.000000,0.000000,
0.576131 ,0.000000,0.000000,
0.576183 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.153779 ,0.000000,0.000000,
0.576183 ,0.000000,0.000000,
0.576278 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.174572 ,0.000000,0.000000,
0.576278 ,0.000000,0.000000,
0.576414 ,0.000000,0.000000,
0.488670 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.488670 ,0.000000,0.000000,
0.408907 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.408907 ,0.000000,0.000000,
0.320731 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.320731 ,0.000000,0.000000,
0.191761 ,0.000000,0.000000,
0.576113 ,0.000000,0.000000,
0.468282 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.468282 ,0.000000,0.000000,
0.360428 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.360428 ,0.000000,0.000000,
0.252569 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.252569 ,0.000000,0.000000,
0.144727 ,0.000000,0.000000,
0.152031 ,0.000000,0.000000,
0.576131 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.470121 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.364085 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.258045 ,0.000000,0.000000,
0.152031 ,0.000000,0.000000,
0.153779 ,0.000000,0.000000,
0.576183 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.474735 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.373685 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.273567 ,0.000000,0.000000,
0.153779 ,0.000000,0.000000,
0.174572 ,0.000000,0.000000,
0.576278 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.488670 ,0.000000,0.000000,
0.481211 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.408907 ,0.000000,0.000000,
0.387979 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.320731 ,0.000000,0.000000,
0.284689 ,0.000000,0.000000,
0.174572 ,0.000000,0.000000,
0.191761 ,0.000000,0.000000,
0.392157 ,0.196078,0.196078,
0.392157 ,0.196078,0.196078,
0.392157 ,0.196078,0.196078,
0.392157 ,0.196078,0.196078,
0.392157 ,0.196078,0.196078,
0.392157 ,0.196078,0.196078,
0.561142 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.560841 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.945494 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.561142 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.992528 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.945494 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.561142 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.992528 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.879209 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.945494 ,0.000000,0.000000,
0.561142 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.668972 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.776827 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.884686 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.985224 ,0.000000,0.000000,
0.561124 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.667134 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.773170 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.879210 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.983476 ,0.000000,0.000000,
0.561072 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.662520 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.763570 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.863688 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.962683 ,0.000000,0.000000,
0.560977 ,0.000000,0.000000,
0.560841 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.656044 ,0.000000,0.000000,
0.648585 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.749276 ,0.000000,0.000000,
0.728347 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.852566 ,0.000000,0.000000,
0.816524 ,0.000000,0.000000,
0.945494 ,0.000000,0.000000,

  };

  	float brickpositions[]={
  		-1.0f,-3.2f,2.4f,0,0,
  		6.0f,-3.2f,2.4f,0,0,
  		0.0f,-0.8f,2.4f,0,0,
  		4.5f,-0.8f,2.4f,0,0

  	};








    GLfloat bertex_buffer_data [] = 
  {
    1.000000 ,0.650000 ,0.100000,
0.800577 ,0.722830 ,0.100000,
0.797139 ,0.650000 ,0.100000,
0.797139 ,0.650000 ,0.100000,
0.601155 ,0.719691 ,0.100000,
0.594278 ,0.650000 ,0.100000,
0.594278 ,0.650000 ,0.100000,
0.401732 ,0.715296 ,0.100000,
0.391417 ,0.650000 ,0.100000,
0.391417 ,0.650000 ,0.100000,
0.202309 ,0.710273 ,0.100000,
0.188556 ,0.650000 ,0.100000,
1.000000 ,0.724086 ,0.100000,
0.809173 ,0.795661 ,0.100000,
0.800577 ,0.722830 ,0.100000,
0.800577 ,0.722830 ,0.100000,
0.619206 ,0.789068 ,0.100000,
0.601155 ,0.719691 ,0.100000,
0.601155 ,0.719691 ,0.100000,
0.430958 ,0.779337 ,0.100000,
0.401732 ,0.715296 ,0.100000,
0.401732 ,0.715296 ,0.100000,
0.205659 ,0.772493 ,0.100000,
0.202309 ,0.710273 ,0.100000,
1.000000 ,0.798172 ,0.100000,
0.821207 ,0.868491 ,0.100000,
0.809173 ,0.795661 ,0.100000,
0.809173 ,0.795661 ,0.100000,
0.645853 ,0.857818 ,0.100000,
0.619206 ,0.789068 ,0.100000,
0.619206 ,0.789068 ,0.100000,
0.452102 ,0.858697 ,0.100000,
0.430958 ,0.779337 ,0.100000,
0.430958 ,0.779337 ,0.100000,
0.244940 ,0.831176 ,0.100000,
0.205659 ,0.772493 ,0.100000,
1.000000 ,0.872258 ,0.100000,
0.834961 ,0.941322 ,0.100000,
0.821207 ,0.868491 ,0.100000,
0.821207 ,0.868491 ,0.100000,
0.685222 ,0.939626 ,0.100000,
0.645853 ,0.857818 ,0.100000,
0.645853 ,0.857818 ,0.100000,
0.519752 ,0.927886 ,0.100000,
0.452102 ,0.858697 ,0.100000,
0.452102 ,0.858697 ,0.100000,
0.278030 ,0.919473 ,0.100000,
0.244940 ,0.831176 ,0.100000,
1.000000 ,0.650000 ,0.100000,
0.800577 ,0.577170 ,0.100000,
1.000000 ,0.575914 ,0.100000,
0.797139 ,0.650000 ,0.100000,
0.601155 ,0.580309 ,0.100000,
0.800577 ,0.577170 ,0.100000,
0.594278 ,0.650000 ,0.100000,
0.401732 ,0.584704 ,0.100000,
0.601155 ,0.580309 ,0.100000,
0.391417 ,0.650000 ,0.100000,
0.202309 ,0.589727 ,0.100000,
0.401732 ,0.584704 ,0.100000,
1.000000 ,0.575914 ,0.100000,
0.809173 ,0.504339 ,0.100000,
1.000000 ,0.501828 ,0.100000,
0.800577 ,0.577170 ,0.100000,
0.619206 ,0.510932 ,0.100000,
0.809173 ,0.504339 ,0.100000,
0.601155 ,0.580309 ,0.100000,
0.430958 ,0.520663 ,0.100000,
0.619206 ,0.510932 ,0.100000,
0.401732 ,0.584704 ,0.100000,
0.205659 ,0.527507 ,0.100000,
0.430958 ,0.520663 ,0.100000,
1.000000 ,0.501828 ,0.100000,
0.821207 ,0.431509 ,0.100000,
1.000000 ,0.427742 ,0.100000,
0.809173 ,0.504339 ,0.100000,
0.645853 ,0.442182 ,0.100000,
0.821207 ,0.431509 ,0.100000,
0.619206 ,0.510932 ,0.100000,
0.452102 ,0.441303 ,0.100000,
0.645853 ,0.442182 ,0.100000,
0.430958 ,0.520663 ,0.100000,
0.244940 ,0.468824 ,0.100000,
0.452102 ,0.441303 ,0.100000,
1.000000 ,0.427742 ,0.100000,
0.834961 ,0.358678 ,0.100000,
1.000000 ,0.353656 ,0.100000,
0.821207 ,0.431509 ,0.100000,
0.685222 ,0.360374 ,0.100000,
0.834961 ,0.358678 ,0.100000,
0.645853 ,0.442182 ,0.100000,
0.519752 ,0.372114 ,0.100000,
0.685222 ,0.360374 ,0.100000,
0.452102 ,0.441303 ,0.100000,
0.278030 ,0.380527 ,0.100000,
0.519752 ,0.372114 ,0.100000,
1.000000 ,0.650000 ,0.100000,
1.000000 ,0.724086 ,0.100000,
0.800577 ,0.722830 ,0.100000,
0.797139 ,0.650000 ,0.100000,
0.800577 ,0.722830 ,0.100000,
0.601155 ,0.719691 ,0.100000,
0.594278 ,0.650000 ,0.100000,
0.601155 ,0.719691 ,0.100000,
0.401732 ,0.715296 ,0.100000,
0.391417 ,0.650000 ,0.100000,
0.401732 ,0.715296 ,0.100000,
0.202309 ,0.710273 ,0.100000,
1.000000 ,0.724086 ,0.100000,
1.000000 ,0.798172 ,0.100000,
0.809173 ,0.795661 ,0.100000,
0.800577 ,0.722830 ,0.100000,
0.809173 ,0.795661 ,0.100000,
0.619206 ,0.789068 ,0.100000,
0.601155 ,0.719691 ,0.100000,
0.619206 ,0.789068 ,0.100000,
0.430958 ,0.779337 ,0.100000,
0.401732 ,0.715296 ,0.100000,
0.430958 ,0.779337 ,0.100000,
0.205659 ,0.772493 ,0.100000,
1.000000 ,0.798172 ,0.100000,
1.000000 ,0.872258 ,0.100000,
0.821207 ,0.868491 ,0.100000,
0.809173 ,0.795661 ,0.100000,
0.821207 ,0.868491 ,0.100000,
0.645853 ,0.857818 ,0.100000,
0.619206 ,0.789068 ,0.100000,
0.645853 ,0.857818 ,0.100000,
0.452102 ,0.858697 ,0.100000,
0.430958 ,0.779337 ,0.100000,
0.452102 ,0.858697 ,0.100000,
0.244940 ,0.831176 ,0.100000,
1.000000 ,0.872258 ,0.100000,
1.000000 ,0.946344 ,0.100000,
0.834961 ,0.941322 ,0.100000,
0.821207 ,0.868491 ,0.100000,
0.834961 ,0.941322 ,0.100000,
0.685222 ,0.939626 ,0.100000,
0.645853 ,0.857818 ,0.100000,
0.685222 ,0.939626 ,0.100000,
0.519752 ,0.927886 ,0.100000,
0.452102 ,0.858697 ,0.100000,
0.519752 ,0.927886 ,0.100000,
0.278030 ,0.919473 ,0.100000,
1.000000 ,0.650000 ,0.100000,
0.797139 ,0.650000 ,0.100000,
0.800577 ,0.577170 ,0.100000,
0.797139 ,0.650000 ,0.100000,
0.594278 ,0.650000 ,0.100000,
0.601155 ,0.580309 ,0.100000,
0.594278 ,0.650000 ,0.100000,
0.391417 ,0.650000 ,0.100000,
0.401732 ,0.584704 ,0.100000,
0.391417 ,0.650000 ,0.100000,
0.188556 ,0.650000 ,0.100000,
0.202309 ,0.589727 ,0.100000,
1.000000 ,0.575914 ,0.100000,
0.800577 ,0.577170 ,0.100000,
0.809173 ,0.504339 ,0.100000,
0.800577 ,0.577170 ,0.100000,
0.601155 ,0.580309 ,0.100000,
0.619206 ,0.510932 ,0.100000,
0.601155 ,0.580309 ,0.100000,
0.401732 ,0.584704 ,0.100000,
0.430958 ,0.520663 ,0.100000,
0.401732 ,0.584704 ,0.100000,
0.202309 ,0.589727 ,0.100000,
0.205659 ,0.527507 ,0.100000,
1.000000 ,0.501828 ,0.100000,
0.809173 ,0.504339 ,0.100000,
0.821207 ,0.431509 ,0.100000,
0.809173 ,0.504339 ,0.100000,
0.619206 ,0.510932 ,0.100000,
0.645853 ,0.442182 ,0.100000,
0.619206 ,0.510932 ,0.100000,
0.430958 ,0.520663 ,0.100000,
0.452102 ,0.441303 ,0.100000,
0.430958 ,0.520663 ,0.100000,
0.205659 ,0.527507 ,0.100000,
0.244940 ,0.468824 ,0.100000,
1.000000 ,0.427742 ,0.100000,
0.821207 ,0.431509 ,0.100000,
0.834961 ,0.358678 ,0.100000,
0.821207 ,0.431509 ,0.100000,
0.645853 ,0.442182 ,0.100000,
0.685222 ,0.360374 ,0.100000,
0.645853 ,0.442182 ,0.100000,
0.452102 ,0.441303 ,0.100000,
0.519752 ,0.372114 ,0.100000,
0.452102 ,0.441303 ,0.100000,
0.244940 ,0.468824 ,0.100000,
0.278030 ,0.380527 ,0.100000,
-1.000000 ,-0.650000 ,0.100000,
-0.800577 ,-0.577170 ,0.100000,
-1.000000 ,-0.575914 ,0.100000,
-0.797139 ,-0.650000 ,0.100000,
-0.601155 ,-0.580309 ,0.100000,
-0.800577 ,-0.577170 ,0.100000,
-0.594278 ,-0.650000 ,0.100000,
-0.401732 ,-0.584704 ,0.100000,
-0.601155 ,-0.580309 ,0.100000,
-0.391417 ,-0.650000 ,0.100000,
-0.202309 ,-0.589727 ,0.100000,
-0.401732 ,-0.584704 ,0.100000,
-1.000000 ,-0.575914 ,0.100000,
-0.809173 ,-0.504339 ,0.100000,
-1.000000 ,-0.501828 ,0.100000,
-0.800577 ,-0.577170 ,0.100000,
-0.619206 ,-0.510932 ,0.100000,
-0.809173 ,-0.504339 ,0.100000,
-0.601155 ,-0.580309 ,0.100000,
-0.430958 ,-0.520663 ,0.100000,
-0.619206 ,-0.510932 ,0.100000,
-0.401732 ,-0.584704 ,0.100000,
-0.205659 ,-0.527507 ,0.100000,
-0.430958 ,-0.520663 ,0.100000,
-1.000000 ,-0.501828 ,0.100000,
-0.821207 ,-0.431509 ,0.100000,
-1.000000 ,-0.427742 ,0.100000,
-0.809173 ,-0.504339 ,0.100000,
-0.645853 ,-0.442182 ,0.100000,
-0.821207 ,-0.431509 ,0.100000,
-0.619206 ,-0.510932 ,0.100000,
-0.452102 ,-0.441303 ,0.100000,
-0.645853 ,-0.442182 ,0.100000,
-0.430958 ,-0.520663 ,0.100000,
-0.244940 ,-0.468824 ,0.100000,
-0.452102 ,-0.441303 ,0.100000,
-1.000000 ,-0.427742 ,0.100000,
-0.834961 ,-0.358678 ,0.100000,
-1.000000 ,-0.353656 ,0.100000,
-0.821207 ,-0.431509 ,0.100000,
-0.685222 ,-0.360374 ,0.100000,
-0.834961 ,-0.358678 ,0.100000,
-0.645853 ,-0.442182 ,0.100000,
-0.519752 ,-0.372114 ,0.100000,
-0.685222 ,-0.360374 ,0.100000,
-0.452102 ,-0.441303 ,0.100000,
-0.278030 ,-0.380527 ,0.100000,
-0.519752 ,-0.372114 ,0.100000,
-1.000000 ,-0.650000 ,0.100000,
-0.800577 ,-0.722830 ,0.100000,
-0.797139 ,-0.650000 ,0.100000,
-0.797139 ,-0.650000 ,0.100000,
-0.601155 ,-0.719691 ,0.100000,
-0.594278 ,-0.650000 ,0.100000,
-0.594278 ,-0.650000 ,0.100000,
-0.401732 ,-0.715296 ,0.100000,
-0.391417 ,-0.650000 ,0.100000,
-0.391417 ,-0.650000 ,0.100000,
-0.202309 ,-0.710273 ,0.100000,
-0.188556 ,-0.650000 ,0.100000,
-1.000000 ,-0.724086 ,0.100000,
-0.809173 ,-0.795661 ,0.100000,
-0.800577 ,-0.722830 ,0.100000,
-0.800577 ,-0.722830 ,0.100000,
-0.619206 ,-0.789068 ,0.100000,
-0.601155 ,-0.719691 ,0.100000,
-0.601155 ,-0.719691 ,0.100000,
-0.430958 ,-0.779337 ,0.100000,
-0.401732 ,-0.715296 ,0.100000,
-0.401732 ,-0.715296 ,0.100000,
-0.205659 ,-0.772493 ,0.100000,
-0.202309 ,-0.710273 ,0.100000,
-1.000000 ,-0.798172 ,0.100000,
-0.821207 ,-0.868491 ,0.100000,
-0.809173 ,-0.795661 ,0.100000,
-0.809173 ,-0.795661 ,0.100000,
-0.645853 ,-0.857818 ,0.100000,
-0.619206 ,-0.789068 ,0.100000,
-0.619206 ,-0.789068 ,0.100000,
-0.452102 ,-0.858697 ,0.100000,
-0.430958 ,-0.779337 ,0.100000,
-0.430958 ,-0.779337 ,0.100000,
-0.244940 ,-0.831176 ,0.100000,
-0.205659 ,-0.772493 ,0.100000,
-1.000000 ,-0.872258 ,0.100000,
-0.834961 ,-0.941322 ,0.100000,
-0.821207 ,-0.868491 ,0.100000,
-0.821207 ,-0.868491 ,0.100000,
-0.685222 ,-0.939626 ,0.100000,
-0.645853 ,-0.857818 ,0.100000,
-0.645853 ,-0.857818 ,0.100000,
-0.519752 ,-0.927886 ,0.100000,
-0.452102 ,-0.858697 ,0.100000,
-0.452102 ,-0.858697 ,0.100000,
-0.278030 ,-0.919473 ,0.100000,
-0.244940 ,-0.831176 ,0.100000,
-1.000000 ,-0.650000 ,0.100000,
-0.797139 ,-0.650000 ,0.100000,
-0.800577 ,-0.577170 ,0.100000,
-0.797139 ,-0.650000 ,0.100000,
-0.594278 ,-0.650000 ,0.100000,
-0.601155 ,-0.580309 ,0.100000,
-0.594278 ,-0.650000 ,0.100000,
-0.391417 ,-0.650000 ,0.100000,
-0.401732 ,-0.584704 ,0.100000,
-0.391417 ,-0.650000 ,0.100000,
-0.188556 ,-0.650000 ,0.100000,
-0.202309 ,-0.589727 ,0.100000,
-1.000000 ,-0.575914 ,0.100000,
-0.800577 ,-0.577170 ,0.100000,
-0.809173 ,-0.504339 ,0.100000,
-0.800577 ,-0.577170 ,0.100000,
-0.601155 ,-0.580309 ,0.100000,
-0.619206 ,-0.510932 ,0.100000,
-0.601155 ,-0.580309 ,0.100000,
-0.401732 ,-0.584704 ,0.100000,
-0.430958 ,-0.520663 ,0.100000,
-0.401732 ,-0.584704 ,0.100000,
-0.202309 ,-0.589727 ,0.100000,
-0.205659 ,-0.527507 ,0.100000,
-1.000000 ,-0.501828 ,0.100000,
-0.809173 ,-0.504339 ,0.100000,
-0.821207 ,-0.431509 ,0.100000,
-0.809173 ,-0.504339 ,0.100000,
-0.619206 ,-0.510932 ,0.100000,
-0.645853 ,-0.442182 ,0.100000,
-0.619206 ,-0.510932 ,0.100000,
-0.430958 ,-0.520663 ,0.100000,
-0.452102 ,-0.441303 ,0.100000,
-0.430958 ,-0.520663 ,0.100000,
-0.205659 ,-0.527507 ,0.100000,
-0.244940 ,-0.468824 ,0.100000,
-1.000000 ,-0.427742 ,0.100000,
-0.821207 ,-0.431509 ,0.100000,
-0.834961 ,-0.358678 ,0.100000,
-0.821207 ,-0.431509 ,0.100000,
-0.645853 ,-0.442182 ,0.100000,
-0.685222 ,-0.360374 ,0.100000,
-0.645853 ,-0.442182 ,0.100000,
-0.452102 ,-0.441303 ,0.100000,
-0.519752 ,-0.372114 ,0.100000,
-0.452102 ,-0.441303 ,0.100000,
-0.244940 ,-0.468824 ,0.100000,
-0.278030 ,-0.380527 ,0.100000,
-1.000000 ,-0.650000 ,0.100000,
-1.000000 ,-0.724086 ,0.100000,
-0.800577 ,-0.722830 ,0.100000,
-0.797139 ,-0.650000 ,0.100000,
-0.800577 ,-0.722830 ,0.100000,
-0.601155 ,-0.719691 ,0.100000,
-0.594278 ,-0.650000 ,0.100000,
-0.601155 ,-0.719691 ,0.100000,
-0.401732 ,-0.715296 ,0.100000,
-0.391417 ,-0.650000 ,0.100000,
-0.401732 ,-0.715296 ,0.100000,
-0.202309 ,-0.710273 ,0.100000,
-1.000000 ,-0.724086 ,0.100000,
-1.000000 ,-0.798172 ,0.100000,
-0.809173 ,-0.795661 ,0.100000,
-0.800577 ,-0.722830 ,0.100000,
-0.809173 ,-0.795661 ,0.100000,
-0.619206 ,-0.789068 ,0.100000,
-0.601155 ,-0.719691 ,0.100000,
-0.619206 ,-0.789068 ,0.100000,
-0.430958 ,-0.779337 ,0.100000,
-0.401732 ,-0.715296 ,0.100000,
-0.430958 ,-0.779337 ,0.100000,
-0.205659 ,-0.772493 ,0.100000,
-1.000000 ,-0.798172 ,0.100000,
-1.000000 ,-0.872258 ,0.100000,
-0.821207 ,-0.868491 ,0.100000,
-0.809173 ,-0.795661 ,0.100000,
-0.821207 ,-0.868491 ,0.100000,
-0.645853 ,-0.857818 ,0.100000,
-0.619206 ,-0.789068 ,0.100000,
-0.645853 ,-0.857818 ,0.100000,
-0.452102 ,-0.858697 ,0.100000,
-0.430958 ,-0.779337 ,0.100000,
-0.452102 ,-0.858697 ,0.100000,
-0.244940 ,-0.831176 ,0.100000,
-1.000000 ,-0.872258 ,0.100000,
-1.000000 ,-0.946344 ,0.100000,
-0.834961 ,-0.941322 ,0.100000,
-0.821207 ,-0.868491 ,0.100000,
-0.834961 ,-0.941322 ,0.100000,
-0.685222 ,-0.939626 ,0.100000,
-0.645853 ,-0.857818 ,0.100000,
-0.685222 ,-0.939626 ,0.100000,
-0.519752 ,-0.927886 ,0.100000,
-0.452102 ,-0.858697 ,0.100000,
-0.519752 ,-0.927886 ,0.100000,
-0.278030 ,-0.919473 ,0.100000,
0.000000 ,-0.000000 ,0.100000,
-0.199423 ,0.072830 ,0.100000,
-0.202861 ,-0.000000 ,0.100000,
-0.202861 ,-0.000000 ,0.100000,
-0.398845 ,0.069691 ,0.100000,
-0.405722 ,-0.000000 ,0.100000,
-0.405722 ,-0.000000 ,0.100000,
-0.598268 ,0.065296 ,0.100000,
-0.608583 ,-0.000000 ,0.100000,
-0.608583 ,-0.000000 ,0.100000,
-0.797691 ,0.060273 ,0.100000,
-0.811444 ,-0.000000 ,0.100000,
0.000000 ,0.074086 ,0.100000,
-0.190827 ,0.145661 ,0.100000,
-0.199423 ,0.072830 ,0.100000,
-0.199423 ,0.072830 ,0.100000,
-0.380794 ,0.139068 ,0.100000,
-0.398845 ,0.069691 ,0.100000,
-0.398845 ,0.069691 ,0.100000,
-0.569042 ,0.129337 ,0.100000,
-0.598268 ,0.065296 ,0.100000,
-0.598268 ,0.065296 ,0.100000,
-0.794341 ,0.122493 ,0.100000,
-0.797691 ,0.060273 ,0.100000,
0.000000 ,0.148172 ,0.100000,
-0.178793 ,0.218491 ,0.100000,
-0.190827 ,0.145661 ,0.100000,
-0.190827 ,0.145661 ,0.100000,
-0.354147 ,0.207818 ,0.100000,
-0.380794 ,0.139068 ,0.100000,
-0.380794 ,0.139068 ,0.100000,
-0.547898 ,0.208697 ,0.100000,
-0.569042 ,0.129337 ,0.100000,
-0.569042 ,0.129337 ,0.100000,
-0.755060 ,0.181176 ,0.100000,
-0.794341 ,0.122493 ,0.100000,
0.000000 ,0.222258 ,0.100000,
-0.165039 ,0.291322 ,0.100000,
-0.178793 ,0.218491 ,0.100000,
-0.178793 ,0.218491 ,0.100000,
-0.314778 ,0.289626 ,0.100000,
-0.354147 ,0.207818 ,0.100000,
-0.354147 ,0.207818 ,0.100000,
-0.480248 ,0.277886 ,0.100000,
-0.547898 ,0.208697 ,0.100000,
-0.547898 ,0.208697 ,0.100000,
-0.721970 ,0.269473 ,0.100000,
-0.755060 ,0.181176 ,0.100000,
0.000000 ,-0.000000 ,0.100000,
0.199423 ,0.072830 ,0.100000,
0.000000 ,0.074086 ,0.100000,
0.202861 ,-0.000000 ,0.100000,
0.398845 ,0.069691 ,0.100000,
0.199423 ,0.072830 ,0.100000,
0.405722 ,-0.000000 ,0.100000,
0.598268 ,0.065296 ,0.100000,
0.398845 ,0.069691 ,0.100000,
0.608583 ,-0.000000 ,0.100000,
0.797691 ,0.060273 ,0.100000,
0.598268 ,0.065296 ,0.100000,
0.000000 ,0.074086 ,0.100000,
0.190827 ,0.145661 ,0.100000,
0.000000 ,0.148172 ,0.100000,
0.199423 ,0.072830 ,0.100000,
0.380794 ,0.139068 ,0.100000,
0.190827 ,0.145661 ,0.100000,
0.398845 ,0.069691 ,0.100000,
0.569042 ,0.129337 ,0.100000,
0.380794 ,0.139068 ,0.100000,
0.598268 ,0.065296 ,0.100000,
0.794341 ,0.122493 ,0.100000,
0.569042 ,0.129337 ,0.100000,
0.000000 ,0.148172 ,0.100000,
0.178793 ,0.218491 ,0.100000,
0.000000 ,0.222258 ,0.100000,
0.190827 ,0.145661 ,0.100000,
0.354147 ,0.207818 ,0.100000,
0.178793 ,0.218491 ,0.100000,
0.380794 ,0.139068 ,0.100000,
0.547898 ,0.208697 ,0.100000,
0.354147 ,0.207818 ,0.100000,
0.569042 ,0.129337 ,0.100000,
0.755060 ,0.181176 ,0.100000,
0.547898 ,0.208697 ,0.100000,
0.000000 ,0.222258 ,0.100000,
0.165039 ,0.291322 ,0.100000,
0.000000 ,0.296344 ,0.100000,
0.178793 ,0.218491 ,0.100000,
0.314778 ,0.289626 ,0.100000,
0.165039 ,0.291322 ,0.100000,
0.354147 ,0.207818 ,0.100000,
0.480248 ,0.277886 ,0.100000,
0.314778 ,0.289626 ,0.100000,
0.547898 ,0.208697 ,0.100000,
0.721970 ,0.269473 ,0.100000,
0.480248 ,0.277886 ,0.100000,
0.000000 ,-0.000000 ,0.100000,
-0.199423 ,-0.072830 ,0.100000,
0.000000 ,-0.074086 ,0.100000,
-0.202861 ,-0.000000 ,0.100000,
-0.398845 ,-0.069691 ,0.100000,
-0.199423 ,-0.072830 ,0.100000,
-0.405722 ,-0.000000 ,0.100000,
-0.598268 ,-0.065296 ,0.100000,
-0.398845 ,-0.069691 ,0.100000,
-0.608583 ,-0.000000 ,0.100000,
-0.797691 ,-0.060273 ,0.100000,
-0.598268 ,-0.065296 ,0.100000,
0.000000 ,-0.074086 ,0.100000,
-0.190827 ,-0.145661 ,0.100000,
0.000000 ,-0.148172 ,0.100000,
-0.199423 ,-0.072830 ,0.100000,
-0.380794 ,-0.139068 ,0.100000,
-0.190827 ,-0.145661 ,0.100000,
-0.398845 ,-0.069691 ,0.100000,
-0.569042 ,-0.129337 ,0.100000,
-0.380794 ,-0.139068 ,0.100000,
-0.598268 ,-0.065296 ,0.100000,
-0.794341 ,-0.122493 ,0.100000,
-0.569042 ,-0.129337 ,0.100000,
0.000000 ,-0.148172 ,0.100000,
-0.178793 ,-0.218491 ,0.100000,
0.000000 ,-0.222258 ,0.100000,
-0.190827 ,-0.145661 ,0.100000,
-0.354147 ,-0.207818 ,0.100000,
-0.178793 ,-0.218491 ,0.100000,
-0.380794 ,-0.139068 ,0.100000,
-0.547898 ,-0.208697 ,0.100000,
-0.354147 ,-0.207818 ,0.100000,
-0.569042 ,-0.129337 ,0.100000,
-0.755060 ,-0.181176 ,0.100000,
-0.547898 ,-0.208697 ,0.100000,
0.000000 ,-0.222258 ,0.100000,
-0.165039 ,-0.291322 ,0.100000,
0.000000 ,-0.296344 ,0.100000,
-0.178793 ,-0.218491 ,0.100000,
-0.314778 ,-0.289626 ,0.100000,
-0.165039 ,-0.291322 ,0.100000,
-0.354147 ,-0.207818 ,0.100000,
-0.480248 ,-0.277886 ,0.100000,
-0.314778 ,-0.289626 ,0.100000,
-0.547898 ,-0.208697 ,0.100000,
-0.721970 ,-0.269473 ,0.100000,
-0.480248 ,-0.277886 ,0.100000,
0.000000 ,-0.000000 ,0.100000,
0.199423 ,-0.072830 ,0.100000,
0.202861 ,-0.000000 ,0.100000,
0.202861 ,-0.000000 ,0.100000,
0.398845 ,-0.069691 ,0.100000,
0.405722 ,-0.000000 ,0.100000,
0.405722 ,-0.000000 ,0.100000,
0.598268 ,-0.065296 ,0.100000,
0.608583 ,-0.000000 ,0.100000,
0.608583 ,-0.000000 ,0.100000,
0.797691 ,-0.060273 ,0.100000,
0.811444 ,-0.000000 ,0.100000,
0.000000 ,-0.074086 ,0.100000,
0.190827 ,-0.145661 ,0.100000,
0.199423 ,-0.072830 ,0.100000,
0.199423 ,-0.072830 ,0.100000,
0.380794 ,-0.139068 ,0.100000,
0.398845 ,-0.069691 ,0.100000,
0.398845 ,-0.069691 ,0.100000,
0.569042 ,-0.129337 ,0.100000,
0.598268 ,-0.065296 ,0.100000,
0.598268 ,-0.065296 ,0.100000,
0.794341 ,-0.122493 ,0.100000,
0.797691 ,-0.060273 ,0.100000,
0.000000 ,-0.148172 ,0.100000,
0.178793 ,-0.218491 ,0.100000,
0.190827 ,-0.145661 ,0.100000,
0.190827 ,-0.145661 ,0.100000,
0.354147 ,-0.207818 ,0.100000,
0.380794 ,-0.139068 ,0.100000,
0.380794 ,-0.139068 ,0.100000,
0.547898 ,-0.208697 ,0.100000,
0.569042 ,-0.129337 ,0.100000,
0.569042 ,-0.129337 ,0.100000,
0.755060 ,-0.181176 ,0.100000,
0.794341 ,-0.122493 ,0.100000,
0.000000 ,-0.222258 ,0.100000,
0.165039 ,-0.291322 ,0.100000,
0.178793 ,-0.218491 ,0.100000,
0.178793 ,-0.218491 ,0.100000,
0.314778 ,-0.289626 ,0.100000,
0.354147 ,-0.207818 ,0.100000,
0.354147 ,-0.207818 ,0.100000,
0.480248 ,-0.277886 ,0.100000,
0.547898 ,-0.208697 ,0.100000,
0.547898 ,-0.208697 ,0.100000,
0.721970 ,-0.269473 ,0.100000,
0.755060 ,-0.181176 ,0.100000,
0.000000 ,-0.000000 ,0.100000,
0.000000 ,0.074086 ,0.100000,
-0.199423 ,0.072830 ,0.100000,
-0.202861 ,-0.000000 ,0.100000,
-0.199423 ,0.072830 ,0.100000,
-0.398845 ,0.069691 ,0.100000,
-0.405722 ,-0.000000 ,0.100000,
-0.398845 ,0.069691 ,0.100000,
-0.598268 ,0.065296 ,0.100000,
-0.608583 ,-0.000000 ,0.100000,
-0.598268 ,0.065296 ,0.100000,
-0.797691 ,0.060273 ,0.100000,
0.000000 ,0.074086 ,0.100000,
0.000000 ,0.148172 ,0.100000,
-0.190827 ,0.145661 ,0.100000,
-0.199423 ,0.072830 ,0.100000,
-0.190827 ,0.145661 ,0.100000,
-0.380794 ,0.139068 ,0.100000,
-0.398845 ,0.069691 ,0.100000,
-0.380794 ,0.139068 ,0.100000,
-0.569042 ,0.129337 ,0.100000,
-0.598268 ,0.065296 ,0.100000,
-0.569042 ,0.129337 ,0.100000,
-0.794341 ,0.122493 ,0.100000,
0.000000 ,0.148172 ,0.100000,
0.000000 ,0.222258 ,0.100000,
-0.178793 ,0.218491 ,0.100000,
-0.190827 ,0.145661 ,0.100000,
-0.178793 ,0.218491 ,0.100000,
-0.354147 ,0.207818 ,0.100000,
-0.380794 ,0.139068 ,0.100000,
-0.354147 ,0.207818 ,0.100000,
-0.547898 ,0.208697 ,0.100000,
-0.569042 ,0.129337 ,0.100000,
-0.547898 ,0.208697 ,0.100000,
-0.755060 ,0.181176 ,0.100000,
0.000000 ,0.222258 ,0.100000,
0.000000 ,0.296344 ,0.100000,
-0.165039 ,0.291322 ,0.100000,
-0.178793 ,0.218491 ,0.100000,
-0.165039 ,0.291322 ,0.100000,
-0.314778 ,0.289626 ,0.100000,
-0.354147 ,0.207818 ,0.100000,
-0.314778 ,0.289626 ,0.100000,
-0.480248 ,0.277886 ,0.100000,
-0.547898 ,0.208697 ,0.100000,
-0.480248 ,0.277886 ,0.100000,
-0.721970 ,0.269473 ,0.100000,
0.000000 ,-0.000000 ,0.100000,
0.202861 ,-0.000000 ,0.100000,
0.199423 ,0.072830 ,0.100000,
0.202861 ,-0.000000 ,0.100000,
0.405722 ,-0.000000 ,0.100000,
0.398845 ,0.069691 ,0.100000,
0.405722 ,-0.000000 ,0.100000,
0.608583 ,-0.000000 ,0.100000,
0.598268 ,0.065296 ,0.100000,
0.608583 ,-0.000000 ,0.100000,
0.811444 ,-0.000000 ,0.100000,
0.797691 ,0.060273 ,0.100000,
0.000000 ,0.074086 ,0.100000,
0.199423 ,0.072830 ,0.100000,
0.190827 ,0.145661 ,0.100000,
0.199423 ,0.072830 ,0.100000,
0.398845 ,0.069691 ,0.100000,
0.380794 ,0.139068 ,0.100000,
0.398845 ,0.069691 ,0.100000,
0.598268 ,0.065296 ,0.100000,
0.569042 ,0.129337 ,0.100000,
0.598268 ,0.065296 ,0.100000,
0.797691 ,0.060273 ,0.100000,
0.794341 ,0.122493 ,0.100000,
0.000000 ,0.148172 ,0.100000,
0.190827 ,0.145661 ,0.100000,
0.178793 ,0.218491 ,0.100000,
0.190827 ,0.145661 ,0.100000,
0.380794 ,0.139068 ,0.100000,
0.354147 ,0.207818 ,0.100000,
0.380794 ,0.139068 ,0.100000,
0.569042 ,0.129337 ,0.100000,
0.547898 ,0.208697 ,0.100000,
0.569042 ,0.129337 ,0.100000,
0.794341 ,0.122493 ,0.100000,
0.755060 ,0.181176 ,0.100000,
0.000000 ,0.222258 ,0.100000,
0.178793 ,0.218491 ,0.100000,
0.165039 ,0.291322 ,0.100000,
0.178793 ,0.218491 ,0.100000,
0.354147 ,0.207818 ,0.100000,
0.314778 ,0.289626 ,0.100000,
0.354147 ,0.207818 ,0.100000,
0.547898 ,0.208697 ,0.100000,
0.480248 ,0.277886 ,0.100000,
0.547898 ,0.208697 ,0.100000,
0.755060 ,0.181176 ,0.100000,
0.721970 ,0.269473 ,0.100000,
0.000000 ,-0.000000 ,0.100000,
-0.202861 ,-0.000000 ,0.100000,
-0.199423 ,-0.072830 ,0.100000,
-0.202861 ,-0.000000 ,0.100000,
-0.405722 ,-0.000000 ,0.100000,
-0.398845 ,-0.069691 ,0.100000,
-0.405722 ,-0.000000 ,0.100000,
-0.608583 ,-0.000000 ,0.100000,
-0.598268 ,-0.065296 ,0.100000,
-0.608583 ,-0.000000 ,0.100000,
-0.811444 ,-0.000000 ,0.100000,
-0.797691 ,-0.060273 ,0.100000,
0.000000 ,-0.074086 ,0.100000,
-0.199423 ,-0.072830 ,0.100000,
-0.190827 ,-0.145661 ,0.100000,
-0.199423 ,-0.072830 ,0.100000,
-0.398845 ,-0.069691 ,0.100000,
-0.380794 ,-0.139068 ,0.100000,
-0.398845 ,-0.069691 ,0.100000,
-0.598268 ,-0.065296 ,0.100000,
-0.569042 ,-0.129337 ,0.100000,
-0.598268 ,-0.065296 ,0.100000,
-0.797691 ,-0.060273 ,0.100000,
-0.794341 ,-0.122493 ,0.100000,
0.000000 ,-0.148172 ,0.100000,
-0.190827 ,-0.145661 ,0.100000,
-0.178793 ,-0.218491 ,0.100000,
-0.190827 ,-0.145661 ,0.100000,
-0.380794 ,-0.139068 ,0.100000,
-0.354147 ,-0.207818 ,0.100000,
-0.380794 ,-0.139068 ,0.100000,
-0.569042 ,-0.129337 ,0.100000,
-0.547898 ,-0.208697 ,0.100000,
-0.569042 ,-0.129337 ,0.100000,
-0.794341 ,-0.122493 ,0.100000,
-0.755060 ,-0.181176 ,0.100000,
0.000000 ,-0.222258 ,0.100000,
-0.178793 ,-0.218491 ,0.100000,
-0.165039 ,-0.291322 ,0.100000,
-0.178793 ,-0.218491 ,0.100000,
-0.354147 ,-0.207818 ,0.100000,
-0.314778 ,-0.289626 ,0.100000,
-0.354147 ,-0.207818 ,0.100000,
-0.547898 ,-0.208697 ,0.100000,
-0.480248 ,-0.277886 ,0.100000,
-0.547898 ,-0.208697 ,0.100000,
-0.755060 ,-0.181176 ,0.100000,
-0.721970 ,-0.269473 ,0.100000,
0.000000 ,-0.000000 ,0.100000,
0.000000 ,-0.074086 ,0.100000,
0.199423 ,-0.072830 ,0.100000,
0.202861 ,-0.000000 ,0.100000,
0.199423 ,-0.072830 ,0.100000,
0.398845 ,-0.069691 ,0.100000,
0.405722 ,-0.000000 ,0.100000,
0.398845 ,-0.069691 ,0.100000,
0.598268 ,-0.065296 ,0.100000,
0.608583 ,-0.000000 ,0.100000,
0.598268 ,-0.065296 ,0.100000,
0.797691 ,-0.060273 ,0.100000,
0.000000 ,-0.074086 ,0.100000,
0.000000 ,-0.148172 ,0.100000,
0.190827 ,-0.145661 ,0.100000,
0.199423 ,-0.072830 ,0.100000,
0.190827 ,-0.145661 ,0.100000,
0.380794 ,-0.139068 ,0.100000,
0.398845 ,-0.069691 ,0.100000,
0.380794 ,-0.139068 ,0.100000,
0.569042 ,-0.129337 ,0.100000,
0.598268 ,-0.065296 ,0.100000,
0.569042 ,-0.129337 ,0.100000,
0.794341 ,-0.122493 ,0.100000,
0.000000 ,-0.148172 ,0.100000,
0.000000 ,-0.222258 ,0.100000,
0.178793 ,-0.218491 ,0.100000,
0.190827 ,-0.145661 ,0.100000,
0.178793 ,-0.218491 ,0.100000,
0.354147 ,-0.207818 ,0.100000,
0.380794 ,-0.139068 ,0.100000,
0.354147 ,-0.207818 ,0.100000,
0.547898 ,-0.208697 ,0.100000,
0.569042 ,-0.129337 ,0.100000,
0.547898 ,-0.208697 ,0.100000,
0.755060 ,-0.181176 ,0.100000,
0.000000 ,-0.222258 ,0.100000,
0.000000 ,-0.296344 ,0.100000,
0.165039 ,-0.291322 ,0.100000,
0.178793 ,-0.218491 ,0.100000,
0.165039 ,-0.291322 ,0.100000,
0.314778 ,-0.289626 ,0.100000,
0.354147 ,-0.207818 ,0.100000,
0.314778 ,-0.289626 ,0.100000,
0.480248 ,-0.277886 ,0.100000,
0.547898 ,-0.208697 ,0.100000,
0.480248 ,-0.277886 ,0.100000,
0.721970 ,-0.269473 ,0.100000,
1.000000 ,-0.650000 ,0.100000,
0.800577 ,-0.577170 ,0.100000,
0.797139 ,-0.650000 ,0.100000,
0.797139 ,-0.650000 ,0.100000,
0.601155 ,-0.580309 ,0.100000,
0.594278 ,-0.650000 ,0.100000,
0.594278 ,-0.650000 ,0.100000,
0.401732 ,-0.584704 ,0.100000,
0.391417 ,-0.650000 ,0.100000,
0.391417 ,-0.650000 ,0.100000,
0.202309 ,-0.589727 ,0.100000,
0.188556 ,-0.650000 ,0.100000,
1.000000 ,-0.575914 ,0.100000,
0.809173 ,-0.504339 ,0.100000,
0.800577 ,-0.577170 ,0.100000,
0.800577 ,-0.577170 ,0.100000,
0.619206 ,-0.510932 ,0.100000,
0.601155 ,-0.580309 ,0.100000,
0.601155 ,-0.580309 ,0.100000,
0.430958 ,-0.520663 ,0.100000,
0.401732 ,-0.584704 ,0.100000,
0.401732 ,-0.584704 ,0.100000,
0.205659 ,-0.527507 ,0.100000,
0.202309 ,-0.589727 ,0.100000,
1.000000 ,-0.501828 ,0.100000,
0.821207 ,-0.431509 ,0.100000,
0.809173 ,-0.504339 ,0.100000,
0.809173 ,-0.504339 ,0.100000,
0.645853 ,-0.442182 ,0.100000,
0.619206 ,-0.510932 ,0.100000,
0.619206 ,-0.510932 ,0.100000,
0.452102 ,-0.441303 ,0.100000,
0.430958 ,-0.520663 ,0.100000,
0.430958 ,-0.520663 ,0.100000,
0.244940 ,-0.468824 ,0.100000,
0.205659 ,-0.527507 ,0.100000,
1.000000 ,-0.427742 ,0.100000,
0.834961 ,-0.358678 ,0.100000,
0.821207 ,-0.431509 ,0.100000,
0.821207 ,-0.431509 ,0.100000,
0.685222 ,-0.360374 ,0.100000,
0.645853 ,-0.442182 ,0.100000,
0.645853 ,-0.442182 ,0.100000,
0.519752 ,-0.372114 ,0.100000,
0.452102 ,-0.441303 ,0.100000,
0.452102 ,-0.441303 ,0.100000,
0.278030 ,-0.380527 ,0.100000,
0.244940 ,-0.468824 ,0.100000,
1.000000 ,-0.650000 ,0.100000,
0.800577 ,-0.722830 ,0.100000,
1.000000 ,-0.724086 ,0.100000,
0.797139 ,-0.650000 ,0.100000,
0.601155 ,-0.719691 ,0.100000,
0.800577 ,-0.722830 ,0.100000,
0.594278 ,-0.650000 ,0.100000,
0.401732 ,-0.715296 ,0.100000,
0.601155 ,-0.719691 ,0.100000,
0.391417 ,-0.650000 ,0.100000,
0.202309 ,-0.710273 ,0.100000,
0.401732 ,-0.715296 ,0.100000,
1.000000 ,-0.724086 ,0.100000,
0.809173 ,-0.795661 ,0.100000,
1.000000 ,-0.798172 ,0.100000,
0.800577 ,-0.722830 ,0.100000,
0.619206 ,-0.789068 ,0.100000,
0.809173 ,-0.795661 ,0.100000,
0.601155 ,-0.719691 ,0.100000,
0.430958 ,-0.779337 ,0.100000,
0.619206 ,-0.789068 ,0.100000,
0.401732 ,-0.715296 ,0.100000,
0.205659 ,-0.772493 ,0.100000,
0.430958 ,-0.779337 ,0.100000,
1.000000 ,-0.798172 ,0.100000,
0.821207 ,-0.868491 ,0.100000,
1.000000 ,-0.872258 ,0.100000,
0.809173 ,-0.795661 ,0.100000,
0.645853 ,-0.857818 ,0.100000,
0.821207 ,-0.868491 ,0.100000,
0.619206 ,-0.789068 ,0.100000,
0.452102 ,-0.858697 ,0.100000,
0.645853 ,-0.857818 ,0.100000,
0.430958 ,-0.779337 ,0.100000,
0.244940 ,-0.831176 ,0.100000,
0.452102 ,-0.858697 ,0.100000,
1.000000 ,-0.872258 ,0.100000,
0.834961 ,-0.941322 ,0.100000,
1.000000 ,-0.946344 ,0.100000,
0.821207 ,-0.868491 ,0.100000,
0.685222 ,-0.939626 ,0.100000,
0.834961 ,-0.941322 ,0.100000,
0.645853 ,-0.857818 ,0.100000,
0.519752 ,-0.927886 ,0.100000,
0.685222 ,-0.939626 ,0.100000,
0.452102 ,-0.858697 ,0.100000,
0.278030 ,-0.919473 ,0.100000,
0.519752 ,-0.927886 ,0.100000,
1.000000 ,-0.650000 ,0.100000,
1.000000 ,-0.575914 ,0.100000,
0.800577 ,-0.577170 ,0.100000,
0.797139 ,-0.650000 ,0.100000,
0.800577 ,-0.577170 ,0.100000,
0.601155 ,-0.580309 ,0.100000,
0.594278 ,-0.650000 ,0.100000,
0.601155 ,-0.580309 ,0.100000,
0.401732 ,-0.584704 ,0.100000,
0.391417 ,-0.650000 ,0.100000,
0.401732 ,-0.584704 ,0.100000,
0.202309 ,-0.589727 ,0.100000,
1.000000 ,-0.575914 ,0.100000,
1.000000 ,-0.501828 ,0.100000,
0.809173 ,-0.504339 ,0.100000,
0.800577 ,-0.577170 ,0.100000,
0.809173 ,-0.504339 ,0.100000,
0.619206 ,-0.510932 ,0.100000,
0.601155 ,-0.580309 ,0.100000,
0.619206 ,-0.510932 ,0.100000,
0.430958 ,-0.520663 ,0.100000,
0.401732 ,-0.584704 ,0.100000,
0.430958 ,-0.520663 ,0.100000,
0.205659 ,-0.527507 ,0.100000,
1.000000 ,-0.501828 ,0.100000,
1.000000 ,-0.427742 ,0.100000,
0.821207 ,-0.431509 ,0.100000,
0.809173 ,-0.504339 ,0.100000,
0.821207 ,-0.431509 ,0.100000,
0.645853 ,-0.442182 ,0.100000,
0.619206 ,-0.510932 ,0.100000,
0.645853 ,-0.442182 ,0.100000,
0.452102 ,-0.441303 ,0.100000,
0.430958 ,-0.520663 ,0.100000,
0.452102 ,-0.441303 ,0.100000,
0.244940 ,-0.468824 ,0.100000,
1.000000 ,-0.427742 ,0.100000,
1.000000 ,-0.353656 ,0.100000,
0.834961 ,-0.358678 ,0.100000,
0.821207 ,-0.431509 ,0.100000,
0.834961 ,-0.358678 ,0.100000,
0.685222 ,-0.360374 ,0.100000,
0.645853 ,-0.442182 ,0.100000,
0.685222 ,-0.360374 ,0.100000,
0.519752 ,-0.372114 ,0.100000,
0.452102 ,-0.441303 ,0.100000,
0.519752 ,-0.372114 ,0.100000,
0.278030 ,-0.380527 ,0.100000,
1.000000 ,-0.650000 ,0.100000,
0.797139 ,-0.650000 ,0.100000,
0.800577 ,-0.722830 ,0.100000,
0.797139 ,-0.650000 ,0.100000,
0.594278 ,-0.650000 ,0.100000,
0.601155 ,-0.719691 ,0.100000,
0.594278 ,-0.650000 ,0.100000,
0.391417 ,-0.650000 ,0.100000,
0.401732 ,-0.715296 ,0.100000,
0.391417 ,-0.650000 ,0.100000,
0.188556 ,-0.650000 ,0.100000,
0.202309 ,-0.710273 ,0.100000,
1.000000 ,-0.724086 ,0.100000,
0.800577 ,-0.722830 ,0.100000,
0.809173 ,-0.795661 ,0.100000,
0.800577 ,-0.722830 ,0.100000,
0.601155 ,-0.719691 ,0.100000,
0.619206 ,-0.789068 ,0.100000,
0.601155 ,-0.719691 ,0.100000,
0.401732 ,-0.715296 ,0.100000,
0.430958 ,-0.779337 ,0.100000,
0.401732 ,-0.715296 ,0.100000,
0.202309 ,-0.710273 ,0.100000,
0.205659 ,-0.772493 ,0.100000,
1.000000 ,-0.798172 ,0.100000,
0.809173 ,-0.795661 ,0.100000,
0.821207 ,-0.868491 ,0.100000,
0.809173 ,-0.795661 ,0.100000,
0.619206 ,-0.789068 ,0.100000,
0.645853 ,-0.857818 ,0.100000,
0.619206 ,-0.789068 ,0.100000,
0.430958 ,-0.779337 ,0.100000,
0.452102 ,-0.858697 ,0.100000,
0.430958 ,-0.779337 ,0.100000,
0.205659 ,-0.772493 ,0.100000,
0.244940 ,-0.831176 ,0.100000,
1.000000 ,-0.872258 ,0.100000,
0.821207 ,-0.868491 ,0.100000,
0.834961 ,-0.941322 ,0.100000,
0.821207 ,-0.868491 ,0.100000,
0.645853 ,-0.857818 ,0.100000,
0.685222 ,-0.939626 ,0.100000,
0.645853 ,-0.857818 ,0.100000,
0.452102 ,-0.858697 ,0.100000,
0.519752 ,-0.927886 ,0.100000,
0.452102 ,-0.858697 ,0.100000,
0.244940 ,-0.831176 ,0.100000,
0.278030 ,-0.919473 ,0.100000,
1.000000 ,-1.000000 ,-0.000000,
-1.000000 ,1.000000 ,0.000000,
-1.000000 ,-1.000000 ,-0.000000,
1.000000 ,-1.000000 ,-0.000000,
1.000000 ,1.000000 ,0.000000,
-1.000000 ,1.000000 ,0.000000,
-1.000000 ,0.650000 ,0.100000,
-0.800577 ,0.722830 ,0.100000,
-1.000000 ,0.724086 ,0.100000,
-0.797139 ,0.650000 ,0.100000,
-0.601155 ,0.719691 ,0.100000,
-0.800577 ,0.722830 ,0.100000,
-0.594278 ,0.650000 ,0.100000,
-0.401732 ,0.715296 ,0.100000,
-0.601155 ,0.719691 ,0.100000,
-0.391417 ,0.650000 ,0.100000,
-0.202309 ,0.710273 ,0.100000,
-0.401732 ,0.715296 ,0.100000,
-1.000000 ,0.724086 ,0.100000,
-0.809173 ,0.795661 ,0.100000,
-1.000000 ,0.798172 ,0.100000,
-0.800577 ,0.722830 ,0.100000,
-0.619206 ,0.789068 ,0.100000,
-0.809173 ,0.795661 ,0.100000,
-0.601155 ,0.719691 ,0.100000,
-0.430958 ,0.779337 ,0.100000,
-0.619206 ,0.789068 ,0.100000,
-0.401732 ,0.715296 ,0.100000,
-0.205659 ,0.772493 ,0.100000,
-0.430958 ,0.779337 ,0.100000,
-1.000000 ,0.798172 ,0.100000,
-0.821207 ,0.868491 ,0.100000,
-1.000000 ,0.872258 ,0.100000,
-0.809173 ,0.795661 ,0.100000,
-0.645853 ,0.857818 ,0.100000,
-0.821207 ,0.868491 ,0.100000,
-0.619206 ,0.789068 ,0.100000,
-0.452102 ,0.858697 ,0.100000,
-0.645853 ,0.857818 ,0.100000,
-0.430958 ,0.779337 ,0.100000,
-0.244940 ,0.831176 ,0.100000,
-0.452102 ,0.858697 ,0.100000,
-1.000000 ,0.872258 ,0.100000,
-0.834961 ,0.941322 ,0.100000,
-1.000000 ,0.946344 ,0.100000,
-0.821207 ,0.868491 ,0.100000,
-0.685222 ,0.939626 ,0.100000,
-0.834961 ,0.941322 ,0.100000,
-0.645853 ,0.857818 ,0.100000,
-0.519752 ,0.927886 ,0.100000,
-0.685222 ,0.939626 ,0.100000,
-0.452102 ,0.858697 ,0.100000,
-0.278030 ,0.919473 ,0.100000,
-0.519752 ,0.927886 ,0.100000,
-1.000000 ,0.650000 ,0.100000,
-0.800577 ,0.577170 ,0.100000,
-0.797139 ,0.650000 ,0.100000,
-0.797139 ,0.650000 ,0.100000,
-0.601155 ,0.580309 ,0.100000,
-0.594278 ,0.650000 ,0.100000,
-0.594278 ,0.650000 ,0.100000,
-0.401732 ,0.584704 ,0.100000,
-0.391417 ,0.650000 ,0.100000,
-0.391417 ,0.650000 ,0.100000,
-0.202309 ,0.589727 ,0.100000,
-0.188556 ,0.650000 ,0.100000,
-1.000000 ,0.575914 ,0.100000,
-0.809173 ,0.504339 ,0.100000,
-0.800577 ,0.577170 ,0.100000,
-0.800577 ,0.577170 ,0.100000,
-0.619206 ,0.510932 ,0.100000,
-0.601155 ,0.580309 ,0.100000,
-0.601155 ,0.580309 ,0.100000,
-0.430958 ,0.520663 ,0.100000,
-0.401732 ,0.584704 ,0.100000,
-0.401732 ,0.584704 ,0.100000,
-0.205659 ,0.527507 ,0.100000,
-0.202309 ,0.589727 ,0.100000,
-1.000000 ,0.501828 ,0.100000,
-0.821207 ,0.431509 ,0.100000,
-0.809173 ,0.504339 ,0.100000,
-0.809173 ,0.504339 ,0.100000,
-0.645853 ,0.442182 ,0.100000,
-0.619206 ,0.510932 ,0.100000,
-0.619206 ,0.510932 ,0.100000,
-0.452102 ,0.441303 ,0.100000,
-0.430958 ,0.520663 ,0.100000,
-0.430958 ,0.520663 ,0.100000,
-0.244940 ,0.468824 ,0.100000,
-0.205659 ,0.527507 ,0.100000,
-1.000000 ,0.427742 ,0.100000,
-0.834961 ,0.358678 ,0.100000,
-0.821207 ,0.431509 ,0.100000,
-0.821207 ,0.431509 ,0.100000,
-0.685222 ,0.360374 ,0.100000,
-0.645853 ,0.442182 ,0.100000,
-0.645853 ,0.442182 ,0.100000,
-0.519752 ,0.372114 ,0.100000,
-0.452102 ,0.441303 ,0.100000,
-0.452102 ,0.441303 ,0.100000,
-0.278030 ,0.380527 ,0.100000,
-0.244940 ,0.468824 ,0.100000,
-1.000000 ,0.650000 ,0.100000,
-0.797139 ,0.650000 ,0.100000,
-0.800577 ,0.722830 ,0.100000,
-0.797139 ,0.650000 ,0.100000,
-0.594278 ,0.650000 ,0.100000,
-0.601155 ,0.719691 ,0.100000,
-0.594278 ,0.650000 ,0.100000,
-0.391417 ,0.650000 ,0.100000,
-0.401732 ,0.715296 ,0.100000,
-0.391417 ,0.650000 ,0.100000,
-0.188556 ,0.650000 ,0.100000,
-0.202309 ,0.710273 ,0.100000,
-1.000000 ,0.724086 ,0.100000,
-0.800577 ,0.722830 ,0.100000,
-0.809173 ,0.795661 ,0.100000,
-0.800577 ,0.722830 ,0.100000,
-0.601155 ,0.719691 ,0.100000,
-0.619206 ,0.789068 ,0.100000,
-0.601155 ,0.719691 ,0.100000,
-0.401732 ,0.715296 ,0.100000,
-0.430958 ,0.779337 ,0.100000,
-0.401732 ,0.715296 ,0.100000,
-0.202309 ,0.710273 ,0.100000,
-0.205659 ,0.772493 ,0.100000,
-1.000000 ,0.798172 ,0.100000,
-0.809173 ,0.795661 ,0.100000,
-0.821207 ,0.868491 ,0.100000,
-0.809173 ,0.795661 ,0.100000,
-0.619206 ,0.789068 ,0.100000,
-0.645853 ,0.857818 ,0.100000,
-0.619206 ,0.789068 ,0.100000,
-0.430958 ,0.779337 ,0.100000,
-0.452102 ,0.858697 ,0.100000,
-0.430958 ,0.779337 ,0.100000,
-0.205659 ,0.772493 ,0.100000,
-0.244940 ,0.831176 ,0.100000,
-1.000000 ,0.872258 ,0.100000,
-0.821207 ,0.868491 ,0.100000,
-0.834961 ,0.941322 ,0.100000,
-0.821207 ,0.868491 ,0.100000,
-0.645853 ,0.857818 ,0.100000,
-0.685222 ,0.939626 ,0.100000,
-0.645853 ,0.857818 ,0.100000,
-0.452102 ,0.858697 ,0.100000,
-0.519752 ,0.927886 ,0.100000,
-0.452102 ,0.858697 ,0.100000,
-0.244940 ,0.831176 ,0.100000,
-0.278030 ,0.919473 ,0.100000,
-1.000000 ,0.650000 ,0.100000,
-1.000000 ,0.575914 ,0.100000,
-0.800577 ,0.577170 ,0.100000,
-0.797139 ,0.650000 ,0.100000,
-0.800577 ,0.577170 ,0.100000,
-0.601155 ,0.580309 ,0.100000,
-0.594278 ,0.650000 ,0.100000,
-0.601155 ,0.580309 ,0.100000,
-0.401732 ,0.584704 ,0.100000,
-0.391417 ,0.650000 ,0.100000,
-0.401732 ,0.584704 ,0.100000,
-0.202309 ,0.589727 ,0.100000,
-1.000000 ,0.575914 ,0.100000,
-1.000000 ,0.501828 ,0.100000,
-0.809173 ,0.504339 ,0.100000,
-0.800577 ,0.577170 ,0.100000,
-0.809173 ,0.504339 ,0.100000,
-0.619206 ,0.510932 ,0.100000,
-0.601155 ,0.580309 ,0.100000,
-0.619206 ,0.510932 ,0.100000,
-0.430958 ,0.520663 ,0.100000,
-0.401732 ,0.584704 ,0.100000,
-0.430958 ,0.520663 ,0.100000,
-0.205659 ,0.527507 ,0.100000,
-1.000000 ,0.501828 ,0.100000,
-1.000000 ,0.427742 ,0.100000,
-0.821207 ,0.431509 ,0.100000,
-0.809173 ,0.504339 ,0.100000,
-0.821207 ,0.431509 ,0.100000,
-0.645853 ,0.442182 ,0.100000,
-0.619206 ,0.510932 ,0.100000,
-0.645853 ,0.442182 ,0.100000,
-0.452102 ,0.441303 ,0.100000,
-0.430958 ,0.520663 ,0.100000,
-0.452102 ,0.441303 ,0.100000,
-0.244940 ,0.468824 ,0.100000,
-1.000000 ,0.427742 ,0.100000,
-1.000000 ,0.353656 ,0.100000,
-0.834961 ,0.358678 ,0.100000,
-0.821207 ,0.431509 ,0.100000,
-0.834961 ,0.358678 ,0.100000,
-0.685222 ,0.360374 ,0.100000,
-0.645853 ,0.442182 ,0.100000,
-0.685222 ,0.360374 ,0.100000,
-0.519752 ,0.372114 ,0.100000,
-0.452102 ,0.441303 ,0.100000,
-0.519752 ,0.372114 ,0.100000,
-0.278030 ,0.380527 ,0.100000
};




for (int jj = 0; jj < 386*9; ++jj)
{
    bertex_buffer_data[jj] *= 1.2;

}

























  	int j;
  	for(j=0;j<4;j++)
  	{
	  bricks[j] = create3DObject(GL_TRIANGLES, 386*3, bertex_buffer_data, color_buffer_datas, GL_FILL,0,0,0.3);
	  bricks[j]->cx = brickpositions[5*j];
	  bricks[j]->cy = brickpositions[5*j+1]; 
	  bricks[j]->cradius = brickpositions[5*j+2];
	  bricks[j]->xvel= brickpositions[5*j+3];
	  bricks[j]->yvel = brickpositions[5*j+4];
      bricks[j]->life = 50;
	}
	bricks[2]->vis=0;
	bricks[3]->vis=0;
}

void createRectangles ()
{
  // GL3 accepts only Triangles. Quads are not supported static
  const GLfloat vertex_buffer_data [] = {
    -1.2,-1,0, // vertex 1
    1.2,-1,0, // vertex 2
    1.2, 1,0, // vertex 3

    1.2, 1,0, // vertex 3
    -1.2, 1,0, // vertex 4
    -1.2,-1,0  // vertex 1
  };

  static const GLfloat color_buffer_data [] = {
    0,1,0, // color 1
    1,1,0, // color 2
    1,0,0, // color 3

    1,0,0, // color 3
    0,0,0, // color 4
    0,1,0  // color 1
  };

  // create3DObject creates and returns a handle to a VAO that can be used later
  rectangle[1] = create3DObject(GL_TRIANGLES, 6, vertex_buffer_data, color_buffer_data, GL_FILL,0,0,1.5);
  
}




void createsquare()
{
	const GLfloat vertex_buffer_data [] = {
		-1,-1,0,
		1,-1,0,
		1,1,0,

		1,1,0,
		-1,1,0,
		-1,-1,0
	};
  static const GLfloat color_buffer_data [] = {
    139/255.0f,69/255.0f,19/255.0f, // color 0
    139/255.0f,69/255.0f,19/255.0f, // color 1
    139/255.0f,69/255.0f,19/255.0f, // color 2
    139/255.0f,69/255.0f,19/255.0f, // color 0
    139/255.0f,69/255.0f,19/255.0f, // color 1
    139/255.0f,69/255.0f,19/255.0f, // color 2
  };

  square = create3DObject(GL_TRIANGLES, 6, vertex_buffer_data, color_buffer_data, GL_FILL,0,0,10);


}


void createline()
{
	const GLfloat vertex_buffer_data[] = {
                -1.0f,  0.0f, 0.0f,
                1.0f,  0.0f, 0.0f
    };
	static const GLfloat color_buffer_data [] = {
    	0,205/255.0f,102/255.0f,
    	0,205/255.0f,102/255.0f // color 0
  	};

    line = create3DObject(GL_LINES, 2, vertex_buffer_data, color_buffer_data, GL_LINE,0,0,5);
}

/*void createcircle()
{
    GLfloat x=0, y=0, z=0, radius=2.0f;
    GLint numberOfSides=10;
	int numberOfVertices = numberOfSides + 2;
    GLfloat twicePi = 2.0f * PI;
    
    GLfloat circleVerticesX[numberOfVertices];
    GLfloat circleVerticesY[numberOfVertices];
    GLfloat circleVerticesZ[numberOfVertices];
    
    circleVerticesX[0] = x;
    circleVerticesY[0] = y;
    circleVerticesZ[0] = z;
    
    for ( int i = 1; i < numberOfVertices; i++ )
    {
        circleVerticesX[i] = x + ( radius * cos( i *  twicePi / numberOfSides ) );
        circleVerticesY[i] = y + ( radius * sin( i * twicePi / numberOfSides ) );
        circleVerticesZ[i] = z;
    }
    
    GLfloat allCircleVertices[( numberOfVertices ) * 3];
    GLfloat color_buffer_data[( numberOfVertices ) * 3];
    int col=0;
    for ( int i = 0; i < numberOfVertices; i++ )
    {
        allCircleVertices[i * 3] = circleVerticesX[i];
        allCircleVertices[( i * 3 ) + 1] = circleVerticesY[i];
        allCircleVertices[( i * 3 ) + 2] = circleVerticesZ[i];
        color_buffer_data[col++]=1;
	    color_buffer_data[col++]=0;
	    color_buffer_data[col++]=0;
    }

    circle = create3DObject(GL_TRIANGLE_FAN, numberOfVertices, allCircleVertices, color_buffer_data, GL_FILL);


}*/




void createcircle()
{
	int vertexCount = 50;
	float radius = 1.0f;
	float center_x = 0.0f;
	float center_y = 0.0f;

	// Create a buffer for vertex data
	//GLfloat buffer[] = new GLfloat[vertexCount*3]; // (x,y) for each vertex
	GLfloat buffer[150]={0};
	GLfloat color_buffer_data[150] = {0};
	int idx = 0;
	int col=0;
	int s=255;
	// Center vertex for triangle fan


	// Outer vertices of the circle
	int outerVertexCount = vertexCount-1;

	for (int i = 0; i < outerVertexCount; ++i){
	    float percent = (i / (float) (outerVertexCount-1));
	    float rad = percent * 2 * PI;

	    //Vertex position

	    float outer_x = center_x + radius * cosf(rad);
	    float outer_y = center_y + radius * sinf(rad);

	    buffer[idx++] = outer_x;
	    buffer[idx++] = outer_y;
	    buffer[idx++] = 0;
	    color_buffer_data[col++]=s/255;
	    color_buffer_data[col++]=s/255;
	    color_buffer_data[col++]=s/255;
	    s--;
	}


  static const GLfloat g_uv_buffer_data[] = {
     0.000059f, 1.0f-0.000004f,
     0.000103f, 1.0f-0.336048f,
     0.335973f, 1.0f-0.335903f,
     1.000023f, 1.0f-0.000013f,
     0.667979f, 1.0f-0.335851f,
     0.999958f, 1.0f-0.336064f,
     0.667979f, 1.0f-0.335851f,
     0.336024f, 1.0f-0.671877f,
     0.667969f, 1.0f-0.671889f,
     1.000023f, 1.0f-0.000013f,
     0.668104f, 1.0f-0.000013f,
     0.667979f, 1.0f-0.335851f,
     0.000059f, 1.0f-0.000004f,
     0.335973f, 1.0f-0.335903f,
     0.336098f, 1.0f-0.000071f,
     0.667979f, 1.0f-0.335851f,
     0.335973f, 1.0f-0.335903f,
     0.336024f, 1.0f-0.671877f,
     1.000004f, 1.0f-0.671847f,
     0.999958f, 1.0f-0.336064f,
     0.667979f, 1.0f-0.335851f,
     0.668104f, 1.0f-0.000013f,
     0.335973f, 1.0f-0.335903f,
     0.667979f, 1.0f-0.335851f,
     0.335973f, 1.0f-0.335903f,
     0.668104f, 1.0f-0.000013f,
     0.336098f, 1.0f-0.000071f,
     0.000103f, 1.0f-0.336048f,
     0.000004f, 1.0f-0.671870f,
     0.336024f, 1.0f-0.671877f,
     0.000103f, 1.0f-0.336048f,
     0.336024f, 1.0f-0.671877f,
     0.335973f, 1.0f-0.335903f,
     0.667969f, 1.0f-0.671889f,
     1.000004f, 1.0f-0.671847f,
     0.667979f, 1.0f-0.335851f
 };

static const GLfloat co_uv_buffer_data[] = {
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
	 255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0,
     255/255.0f,215/255.0f,0

 };


  	circle[0] = create3DObject(GL_TRIANGLE_FAN, outerVertexCount, buffer, g_uv_buffer_data, GL_FILL,0,0,1);



	idx = 0;
	col=0;
	s=255;


	radius=0.1;
	for (int i = 0; i < outerVertexCount; ++i){
	    float percent = (i / (float) (outerVertexCount-1));
	    float rad = percent * 2 * PI;

	    //Vertex position

	    float outer_x = center_x + radius * cosf(rad);
	    float outer_y = center_y + radius * sinf(rad);

	    buffer[idx++] = outer_x;
	    buffer[idx++] = outer_y;
	    buffer[idx++] = 0;
	    color_buffer_data[col++]=s/255;
	    color_buffer_data[col++]=s/255;
	    color_buffer_data[col++]=s/255;
	    s--;
	}


  	circle[1] = create3DObject(GL_TRIANGLE_FAN, outerVertexCount, buffer, color_buffer_data, GL_FILL,0,0,0.1);
    circle[1]->cradius=0.1f; 
    circle[1]->vis=1;

    int cn;
    for(cn=2;cn<10;cn++)
    {

        circle[cn] = create3DObject(GL_TRIANGLE_FAN, outerVertexCount, buffer, co_uv_buffer_data, GL_FILL,0,0,1);
        circle[cn]->vis=1;
    
    }

} 

float camera_rotation_angle = 90;
float rectangle_rotation = 0;
float triangle_rotation = 0;

/* Render the scene with openGL */
/* Edit this function according to your assignment */
void draw ()
{
    /*cout << score << endl;*/
  glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  // Eye - Location of camera. Don't change unless you are sure!!
  glm::vec3 eye ( 5*cos(camera_rotation_angle*M_PI/180.0f), 0, 5*sin(camera_rotation_angle*M_PI/180.0f) );
  // Target - Where is the camera looking at.  Don't change unless you are sure!!
  glm::vec3 target (0, 0, 0);
  // Up - Up vector defines tilt of camera.  Don't change unless you are sure!!
  glm::vec3 up (0, 1, 0);

  // Compute Camera matrix (view)
  // Matrices.view = glm::lookAt( eye, target, up ); // Rotating Camera for 3D
  //  Don't change unless you are sure!!
  Matrices.view = glm::lookAt(glm::vec3(0,0,5), glm::vec3(0,0,0), glm::vec3(0,1,0)); // Fixed camera for 2D (ortho) in XY plane

  // Compute ViewProject matrix as view/camera might not be changed for this frame (basic scenario)
  //  Don't change unless you are sure!!
  glm::mat4 VP = Matrices.projection * Matrices.view;

  // Send our transformation to the currently bound shader, in the "MVP" uniform
  // For each model you render, since the MVP will be different (at least the M part)
  //  Don't change unless you are sure!!
  glm::mat4 MVP;	// MVP = Projection * View * Model

  // Load identity to model matrix

  /* Render your scene */

  	/*backgroundid = LoadShaders( "Sample_GL.vert", "Back_GL.frag" );
	GLuint tempo = Texture_load("../AngryBirdsBackground.jpg"); */
  glUseProgram(backgroundid); 

/*  Texture_bind(backgroundid,0);*/



  Matrices.model = glm::mat4(1.0f);

  glm::mat4 translateRectangle = glm::translate (glm::vec3(0, 0, 0));        // glTranslatef
  glm::mat4 rotateRectangle = glm::rotate(glm::radians(0.0f), glm::vec3(0,0,1)); // rotate about vector (-1,1,1)
  glm::mat4 scaleRectangle = glm::scale(glm::vec3(10.0f, 6.0f,1));
  Matrices.model *= (translateRectangle*scaleRectangle*rotateRectangle);
  
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix
  draw3DObject(rectangle[1]);


    drawcoins(MVP,VP);

  	CheckCollisions();
      glUseProgram (programID);

/*		glRasterPos2i(0, 0);

	glColor4f(0.0f, 0.0f, 1.0f, 1.0f);
	glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, 6);*/


  //glUseProgram(wheelid);

/*  Texture_bind(wheelid,0);*/

  Matrices.model = glm::mat4(1.0f);
  float cannoncx = 9.0f,cannoncy=3.9f;
  glm::mat4 translatecircle = glm::translate (glm::vec3(-cannoncx, -cannoncy, 0.0f)); // glTranslatef
  glm::mat4 scalecircle = glm::scale(glm::vec3(0.5,0.5,1));
  circle[0]->cx=-cannoncx;
  circle[0]->cy=-cannoncy;
  circle[0]->cradius=0.5f;
  glm::mat4 rotatecircle = glm::rotate(glm::radians(angle*1.0f),glm::vec3(0,0,1));
  //glm::mat4 triangleTransform = rotateTriangle*translateTriangle;
 // Matrices.model *= (translatecircle*scalecircle*rotatecircle); 
  Matrices.model *= (translatecircle*scalecircle*rotatecircle); 
  MVP = VP * Matrices.model; // MVP = p * V * M

  //  Don't change unless you are sure!!
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix
  draw3DObject(circle[0]);



    glUseProgram (programID);





  Matrices.model = glm::mat4(1.0f);

  glm::mat4 translateSquare = glm::translate(glm::vec3(0,-2,0));
  glm::mat4 scaleSquare = glm::scale(glm::vec3(20, 2, 1));
  Matrices.model *= (scaleSquare * translateSquare );
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix
  //draw3DObject(square);


  Matrices.model = glm::mat4(1.0f);


  translateRectangle = glm::translate (glm::vec3(-10, 3.8f, 0));        // glTranslatef
  rotateRectangle = glm::rotate(glm::radians(90.0f), glm::vec3(0,0,1)); // rotate about vector (-1,1,1)
  scaleRectangle = glm::scale(glm::vec3(0.1f, 1.0f,1));
  Matrices.model *= (translateRectangle*scaleRectangle*rotateRectangle);
  
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix
  draw3DObject(rectangle[0]);
  
  
  Matrices.model = glm::mat4(1.0f);

  translateRectangle = glm::translate (glm::vec3(bricks[0]->cx, bricks[0]->cy, 0));        // glTranslatef
  rotateRectangle = glm::rotate(glm::radians(90.0f), glm::vec3(0,0,1)); // rotate about vector (-1,1,1)
  scaleRectangle = glm::scale(glm::vec3(1.0f, 1.0f,1));
  Matrices.model *= (translateRectangle);
  
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);



  bricks[0]->cx+=bricks[0]->xvel;

  if(bricks[0]->xvel>0)
  {
  	bricks[0]->xvel*=0.8;
  }
  else
  {
  	bricks[0]->xvel=0;
  }

  //CheckCollisions();

  draw3DObject(bricks[0]);



  Matrices.model = glm::mat4(1.0f);

  translateRectangle = glm::translate (glm::vec3(bricks[1]->cx, bricks[1]->cy, 0));        // glTranslatef
  rotateRectangle = glm::rotate(glm::radians(90.0f), glm::vec3(0,0,1)); // rotate about vector (-1,1,1)
  scaleRectangle = glm::scale(glm::vec3(0.8f, 0.8f,1));
  Matrices.model *= (translateRectangle);
  
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

/*  bricks[1]->cx = 1.6f;
  bricks[1]->cy = -2.72f; */
  //bricks[1]->cradius = 1.92f;




  bricks[1]->cx+=bricks[1]->xvel;

  if(bricks[1]->xvel>0)
  {
  	bricks[1]->xvel*=0.7;
  }
  else
  {
  	bricks[1]->xvel=0;
  }


 // CheckCollisions();

  draw3DObject(bricks[1]);

  Matrices.model = glm::mat4(1.0f);

  translateRectangle = glm::translate (glm::vec3(bricks[2]->cx, bricks[2]->cy, 0));        // glTranslatef
  rotateRectangle = glm::rotate(glm::radians(finalrotation), glm::vec3(0,0,1)); // rotate about vector (-1,1,1)
  
  if(bricks[2]->vis==1)
  {
 	 rotateRectangle = glm::rotate(glm::radians(brickrot), glm::vec3(0,0,1)); // rotate about vector (-1,1,1)
  		brickrot -= 4;
  		if(brickrot<=-90)
  		{
  			brickrot=-90;
  		}
  		cout << brickrot << endl;
  }



  


  scaleRectangle = glm::scale(glm::vec3(0.8f, 0.8f,1));
  



  Matrices.model *= (translateRectangle*rotateRectangle);
  
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);





  bricks[2]->cx+=bricks[2]->xvel;

  if(bricks[2]->xvel>0)
  {
  	bricks[2]->xvel*=0.7;
  }
  else
  {
  	bricks[2]->xvel=0;
  }
  if(bricks[2]->cy<=-3.2)
  {
  	bricks[2]->vis = 2;
    bricks[2]->cy = -3.2;
    finalrotation = 0; 
  }


  //CheckCollisions();

  draw3DObject(bricks[2]);






  Matrices.model = glm::mat4(1.0f);

  translateRectangle = glm::translate (glm::vec3(bricks[3]->cx, bricks[3]->cy, 0));        // glTranslatef
  rotateRectangle = glm::rotate(glm::radians(90.0f), glm::vec3(0,0,1)); // rotate about vector (-1,1,1)
  scaleRectangle = glm::scale(glm::vec3(0.8f, 0.8f,1));
  Matrices.model *= (translateRectangle);
  
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

/*  bricks[1]->cx = 1.6f;
  bricks[1]->cy = -2.72f; */




  bricks[3]->cx+=bricks[3]->xvel;

  if(bricks[3]->xvel>0)
  {
  	bricks[3]->xvel*=0.7;
  }
  else
  {
  	bricks[3]->xvel=0;
  }

  //CheckCollisions();


  draw3DObject(bricks[3]);




















  if(powerstate==2&&power!=0)
  {
  	/*vx=(power)*force;
	vy=(power)*force;*/
	initpower=power;
/*	gettimeofday(&tv, NULL); 
	initime=tv.tv_usec;*/
	initime = glutGet(GLUT_ELAPSED_TIME);
	curtime=initime;
	power=0;
	
	float sp = initpower*force;
	vy = sp*sin(glm::radians(angle*1.0f));
  	circle[1]->yvel=vy;
	
  	vx = (sp*cos(glm::radians(angle*1.0f)));
	circle[1]->xvel = vx;

  }



  Matrices.model = glm::mat4(1.0f);
  

  glm::mat4 translateTriangle = glm::translate (glm::vec3(-9.75f, 2.75f+power, 0.0f)); // glTranslatef
  glm::mat4 rotateTriangle = glm::rotate((float)(90*M_PI/180.0f), glm::vec3(0,0,1));  // rotate about vector (1,0,0)
  glm::mat4 scaleTriangle = glm::scale(glm::vec3(0.125f, 0.125f,1));
  glm::mat4 triangleTransform = translateTriangle*rotateTriangle*scaleTriangle;
  Matrices.model *= triangleTransform; 
  MVP = VP * Matrices.model; // MVP = p * V * M

  //  Don't change unless you are sure!!
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix
  draw3DObject(triangle);




  
  Matrices.model = glm::mat4(1.0f);


  glm::mat4 translateLine = glm::translate(glm::vec3(0,-2,0));
  //glm::mat4 rotateLine = glm::rotate(glm::radians(90.0f),glm::vec3(0,0,1));
  glm::mat4 scaleLine = glm::scale(glm::vec3(6,1,1));
  Matrices.model *= (translateLine * scaleLine);
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix
  //draw3DObject(line);


/*  Matrices.model = glm::mat4(1.0f);
  float cannoncx = 5.0f,cannoncy=3.9f;
  glm::mat4 translatecircle = glm::translate (glm::vec3(-cannoncx, -cannoncy, 0.0f)); // glTranslatef
  glm::mat4 scalecircle = glm::scale(glm::vec3(0.5,0.5,1));
  circle[0]->cx=-cannoncx;
  circle[0]->cy=-cannoncy;
  circle[0]->cradius=0.5f;
  glm::mat4 rotatecircle = glm::rotate(glm::radians(angle*1.0f),glm::vec3(0,0,1));
  //glm::mat4 triangleTransform = rotateTriangle*translateTriangle;
 // Matrices.model *= (translatecircle*scalecircle*rotatecircle); 
  Matrices.model *= (translatecircle*scalecircle*rotatecircle); 
  MVP = VP * Matrices.model; // MVP = p * V * M

  //  Don't change unless you are sure!!
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix
  draw3DObject(circle[0]);*/


  Matrices.model = glm::mat4(1.0f);

  scalecircle = glm::scale(glm::vec3(0.1,0.1,1));
  circle[1]->cradius=0.1f; 
  
  float temp = circle[0]->cradius+circle[1]->cradius; //temp=R+r
  


  if(powerstate==0||powerstate==1)
  {
  	translatecircle = glm::translate (glm::vec3(-cannoncx+temp*cos(glm::radians(angle*1.0f)), -cannoncy+temp*sin(glm::radians(angle*1.0f)), 0.0f)); // glTranslatef
  	glm::mat4 translateball = glm::translate(glm::vec3());
  	rotatecircle = glm::rotate(glm::radians(angle*1.0f),glm::vec3(0,0,1));
	circle[1]->cx=-cannoncx+temp*cos(glm::radians(angle*1.0f));
  	circle[1]->cy= -cannoncy+temp*sin(glm::radians(angle*1.0f));
  }
/*  else if(powerstate==2)
  {
  	//cout << "vx" << vx << endl;
  	translatecircle = glm::translate (glm::vec3(-cannoncx+temp*cos(glm::radians(angle*1.0f))+vx, -cannoncy+temp*sin(glm::radians(angle*1.0f))-vy, 0.0f));	
  	circle[1]->cx+=vx;
  	circle[1]->cy+=vy;
  	//printf("%f\n",cos(glm::radians(angle*1.0f)));
  	vx+=(initpower*cos(glm::radians(angle*1.0f))*force);
  	//vy+=(initpower*force*sin(glm::radians(angle*1.0f)));
  	vy+=0.009;
  }*/
  else if(powerstate==2)
  {
  	translatecircle = glm::translate (glm::vec3(circle[1]->cx, circle[1]->cy, 0.0f));	

	curtime = glutGet(GLUT_ELAPSED_TIME);
  	float timedel = (curtime - initime)*0.1;
  	

  	/*vy = sp*sin(glm::radians(angle*1.0f))*(timedel) - 0.009*(timedel)*(timedel); //s=ut-1/2gt^2
  	vy/=10.0;
  	printf("Time - %f\t%lf\n",sin(glm::radians(angle*1.0f)),timedel);
  	cout << sp*sin(glm::radians(angle*1.0f))*(timedel) << " " << 0.0009*(timedel)*(timedel)<<endl;
  	cout << vy <<endl;*/
  	
  	rotatecircle = glm::rotate(glm::radians(angle*1.0f),glm::vec3(0,0,1));
  	vy-=0.01;
  	circle[1]->yvel=vy;

  	circle[1]->cx+=circle[1]->xvel;
  	circle[1]->cy+=circle[1]->yvel;

  	if (circle[1]->cy < -4.2 )  //collision with the ground 
  	{			
		circle[1]->cy = -4.2;
		vy *= -0.5;
		circle[1]->xvel *= 0.94;
	}

  }

  
  Matrices.model *= (translatecircle*rotatecircle); 
  MVP = VP * Matrices.model; // MVP = p * V * M

  //  Don't change unless you are sure!!
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix


  		draw3DObject(circle[1]);





		





  // Swap the frame buffers
  glutSwapBuffers ();

  // Increment angles
  float increments = 1;

  //camera_rotation_angle++; // Simulating camera rotation
  triangle_rotation = triangle_rotation + increments*triangle_rot_dir*triangle_rot_status;
  /*rectangle_rotation = rectangle_rotation + increments*rectangle_rot_dir*rectangle_rot_status;*/
}




void drawcoins(glm::mat4 MVP,glm::mat4 VP)
{
    int coins=2;

   Matrices.model = glm::mat4(1.0f);


  glm::mat4 translateco = glm::translate(glm::vec3(circle[coins]->cx,circle[coins]->cy,0));
  //glm::mat4 rotateLine = glm::rotate(glm::radians(90.0f),glm::vec3(0,0,1));
  glm::mat4 rotateco = glm::rotate((float)(triangle_rotation*M_PI/180.0f), glm::vec3(0,0,1));
  glm::mat4 scaleco = glm::scale(glm::vec3(0.2,0.2,0.2));
  Matrices.model *= (translateco * rotateco);
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);
  for(int tt=2;tt<10;tt++)
  {
      circle[tt]->cradius = 0.3;
  
  }
  circle[coins]->cx = 0;
  circle[coins]->cy =-2;
  if(circle[coins]->vis)
  {
    draw3DObject(circle[coins]);
  }


     Matrices.model = glm::mat4(1.0f);

     coins++;
  translateco = glm::translate(glm::vec3(circle[coins]->cx,circle[coins]->cy,0));
  //glm::mat4 rotateLine = glm::rotate(glm::radians(90.0f),glm::vec3(0,0,1));
  rotateco = glm::rotate((float)(triangle_rotation*M_PI/180.0f), glm::vec3(0,0,1));
  scaleco = glm::scale(glm::vec3(0.2,0.2,0.2));
  Matrices.model *= (translateco *rotateco);
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  circle[coins]->cx = 4;
  circle[coins]->cy = -2;


  if(circle[coins]->vis)
  {
    draw3DObject(circle[coins]);
    }

   Matrices.model = glm::mat4(1.0f);


  translateco = glm::translate(glm::vec3(circle[coins]->cx,circle[coins]->cy,0));
  //glm::mat4 rotateLine = glm::rotate(glm::radians(90.0f),glm::vec3(0,0,1));
  rotateco = glm::rotate((float)(triangle_rotation*M_PI/180.0f), glm::vec3(0,0,1));
  scaleco = glm::scale(glm::vec3(0.2,0.2,0.2));
  Matrices.model *= (translateco * rotateco);
  MVP = VP * Matrices.model;
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  circle[4]->cx = 0;
  circle[4]->cy = 0;




  if(circle[4]->vis)
  {
    draw3DObject(circle[4]);
  }


}










/* Executed when the program is idle (no I/O activity) */
void idle () {
    // OpenGL should never stop drawing
    // can draw the same scene or a modified scene
    draw (); // drawing same scene
}


/* Initialise glut window, I/O callbacks and the renderer to use */
/* Nothing to Edit here */
void initGLUT (int& argc, char** argv, int width, int height)
{
    // Init glut
    glutInit (&argc, argv);

    // Init glut window
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitContextVersion (3, 3); // Init GL 3.3
    glutInitContextFlags (GLUT_CORE_PROFILE); // Use Core profile - older functions are deprecated
    glutInitWindowSize (width, height);
    glutCreateWindow ("Sample OpenGL3.3 Application");

    // Initialize GLEW, Needed in Core profile
    glewExperimental = GL_TRUE;
    GLenum err = glewInit();
    if (err != GLEW_OK) {
        cout << "Error: Failed to initialise GLEW : "<< glewGetErrorString(err) << endl;
        exit (1);
    }

    // register glut callbacks
    glutKeyboardFunc (keyboardDown);
    glutKeyboardUpFunc (keyboardUp);

    glutSpecialFunc (keyboardSpecialDown);
    glutSpecialUpFunc (keyboardSpecialUp);

    glutMouseFunc (mouseClick);
    glutMotionFunc (mouseMotion);

    glutReshapeFunc (reshapeWindow);

    glutDisplayFunc (draw); // function to draw when active
    glutIdleFunc (idle); // function to draw when idle (no I/O activity)
    
    glutIgnoreKeyRepeat (false); // Ignore keys held down

}

/* Process menu option 'op' */
void menu(int op)
{
    switch(op)
    {
        case 'Q':
        case 'q':
            exit(0);
    }
}

void addGLUTMenus ()
{
    // create sub menus
    int subMenu = glutCreateMenu (menu);
    glutAddMenuEntry ("Do Nothing", 0);
    glutAddMenuEntry ("Really Quit", 'q');

    // create main "middle click" menu
    glutCreateMenu (menu);
    glutAddSubMenu ("Sub Menu", subMenu);
    glutAddMenuEntry ("Quit", 'q');
    glutAttachMenu (GLUT_MIDDLE_BUTTON);
}

void createshapes()
{
	createTriangle ();
	createRectangles();
	createRectangle ();
	createsquare();
	createline();
	createcircle();
}

/* Initialize the OpenGL rendering properties */
/* Add all the models to be created here */
void initGL (int width, int height)
{
	// Create the models
	 // Generate the VAO, VBOs, vertices data & copy into the array buffer

	// Create and compile our GLSL program from the shaders
	programID = LoadShaders( "Sample_GL.vert", "Sample_GL.frag" );
	backgroundid = LoadShaders( "Sample_GL.vert", "Back_GL.frag" );
	GLuint tempo = Texture_load("../AngryBirdsBackground.bmp");
	
 /* 	wheelid = LoadShaders( "Sample_GL.vert", "Wheel_GL.frag" );
  	GLuint tempor = Texture_load("../wheel.png");*/


  	Texture_bind(backgroundid,0);
/*  	Texture_bind(wheelid,1);*/

	// Get a handle for our "MVP" uniform
	Matrices.MatrixID = glGetUniformLocation(programID, "MVP");


	reshapeWindow (width, height);

	// Background color of the scene
	glClearColor (0.5294f, 0.807f, 0.9803f, 0); // R, G, B, A
	glClearDepth (1.0f);

	glEnable (GL_DEPTH_TEST);
	glEnable(GL_TEXTURE_2D);
	glDepthFunc (GL_LEQUAL);

	createshapes();




	cout << "VENDOR: " << glGetString(GL_VENDOR) << endl;
	cout << "RENDERER: " << glGetString(GL_RENDERER) << endl;
	cout << "VERSION: " << glGetString(GL_VERSION) << endl;
	cout << "GLSL: " << glGetString(GL_SHADING_LANGUAGE_VERSION) << endl;
}

int main (int argc, char** argv)
{
	int width = 1920;
	int height = 1080;

    initGLUT (argc, argv, width, height);

    addGLUTMenus ();

	initGL (width, height);
/*
	GLuint tex_2d = SOIL_load_OGL_texture
	(
		"../AngryBirdsBackground.jpg",
		SOIL_LOAD_AUTO,
		SOIL_CREATE_NEW_ID,
		SOIL_FLAG_MIPMAPS | SOIL_FLAG_INVERT_Y | SOIL_FLAG_NTSC_SAFE_RGB | SOIL_FLAG_COMPRESS_TO_DXT
	);*/


    glutMainLoop ();

    return 0;
}





GLuint Texture_load(const char *texName){
        GLuint toret;
        int width,height,numComponents;
        unsigned char *imgData=stbi_load(texName,&width,&height,&numComponents,STBI_rgb);
        if(imgData==NULL){
                fprintf(stderr,"Failed to load %s texture file\n",texName);
                exit(1);
        }
        glGenTextures(1,&toret);
        glBindTexture(GL_TEXTURE_2D,toret);
        glTexImage2D(GL_TEXTURE_2D,0,GL_RGB,width,height,0,GL_RGB,GL_UNSIGNED_BYTE,imgData);
        glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
        glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
        stbi_image_free(imgData);
        return toret;
}

void Texture_bind(GLuint texture,int unit)
{
        if(unit<0||unit>31){
                fprintf(stderr,"unit=%d is out of range\n",unit);
                exit(1);
        }
        glActiveTexture(GL_TEXTURE0+unit);
        glBindTexture(GL_TEXTURE_2D,texture);
}

void zoomin()
{
	glm::mat4 scaleworld = glm::scale(glm::vec3(1.02f, 1.02f,1));
	Matrices.projection *= scaleworld;
}

void zoomout()
{
	glm::mat4 scaleworld = glm::scale(glm::vec3(1.02f, 1.02f,1));
	Matrices.projection /= scaleworld;
}

void CheckCollisions()
{
	int tt;
	for(tt=0;tt<2;tt++)
	{
		if(bricks[tt+2]->cx-bricks[tt+2]->cradius/4+bricks[tt+2]->xvel>=bricks[tt]->cx+bricks[tt]->cradius/2)
		{
			if(!bricks[tt+2]->vis)
			{
				bricks[tt+2]->cx = bricks[tt]->cx+bricks[tt]->cradius/2+bricks[tt]->xvel + bricks[tt+2]->cradius/2;
				bricks[tt+2]->vis=1;

			}
			if(bricks[tt+2]->vis==1)
			{
				bricks[tt+2]->cy-=0.2;
			}
			
			
		}
	}
	
	int i;
	for(i=0;i<4;i++)
	{
		float x, y,r, x1, x2, y1, y2;
		x = circle[1]->cx;
		y = circle[1]->cy;
		r = circle[1]->cradius;
		x1 = bricks[i]->cx - bricks[i]->cradius/2 ;
		x2 = bricks[i]->cx + bricks[i]->cradius/2;
		y1 = bricks[i]->cy - bricks[i]->cradius/2;
		y2 = bricks[i]->cy + bricks[i]->cradius/2;
		//collision with the 4 faces...

		if (x > x1 - circle[1]->xvel - r && x < x1 + circle[1]->xvel && y >= y1 && y <= y2) 
		{
				printf("Condition1\n");
				circle[1]->cx = x1 - r; // Sending the ball back.
				bricks[i]->xvel = 0.5 * circle[1]->xvel; //Giving bricks some velocity
				circle[1]->xvel *= -0.5; //Rebounding the ball and decreasing the speed. Collision Type : ->|
		        bricks[i]->life -= 1;  
                score += (int)circle[1]->xvel*1000;
        }
		if (x > x2 - circle[1]->xvel && x < x2 + r - circle[1]->xvel +1 && y >= y1 && y <= y2 && circle[1]->xvel<0) 
		{
			printf("%lf\t%lf\t%lf\n",y,y1,y2);
				circle[1]->cx = x2 + r;
				bricks[i]->xvel = 0.5 * circle[1]->xvel;
				circle[1]->xvel *= -0.5;
                bricks[i]->life -= 1;
		        score += (int)circle[1]->xvel*1000;
        }

		if (x >= x1 && x <= x2) {
			/*printf("Right here\n");*/
			if (y > y1 -r - vy && y < y1 + vy) {
				
				circle[1]->cy = y1 - r;
				vy *= -0.5;
                bricks[i]->life -= 1;
                score += (int)circle[1]->xvel*1500;
			}
		}

		if (x >= x1 && x <= x2) 
		{
			if (y < y2 - vy -r && y > y2 + vy) {
				circle[1]->cy = y2 + r +0.1;
				vy *= -0.5;
                bricks[i]->life -= 1;
			 score += (int)circle[1]->xvel*1500;
            }

		}
		for (int j=0 ; j< 4 ; j++)
		{
			if(j==i)continue;
			//box-box colission;
			if (fabs(bricks[i]->cx - bricks[j]->cx) < bricks[i]->cradius/2 + bricks[j]->cradius/2 && bricks[i]->cy - bricks[j]->cy <= 1e-5)
			{
				if(bricks[i]->xvel != 0) 
				{
					//printf("Collision\n");
					bricks[j]->xvel = bricks[i]->xvel*0.9;
					bricks[i]->xvel = 0;
					if(bricks[i]->cx<bricks[j]->cx&&bricks[i]->cy==bricks[j]->cy)
					{
						printf("%d\t%d\n",i,j);
						bricks[i]->cx=bricks[j]->cx-bricks[j]->cradius/2-bricks[i]->cradius/2-0.09;
					}

				}
				else
				{
					bricks[i]->xvel = bricks[j]->xvel*0.9;
					bricks[j]->xvel = 0;
					if(bricks[i]->cx<bricks[j]->cx&&bricks[i]->cy==bricks[j]->cy)
					{
						printf("Kun%d\t%d\n",i,j);
						bricks[i]->cx=bricks[j]->cx-bricks[j]->cradius/2-bricks[i]->cradius/2-0.09;
					}
				}
			}

		}
	



	}
	




    int co;
    for(co=2;co<5;co++)
    {
        if(fabs(circle[1]->cx-circle[co]->cx) <= circle[1]->cradius+circle[co]->cradius && fabs(circle[1]->cy-circle[co]->cy)<=0.1)
        {
            cout << "1 " << circle[1]->cradius+circle[co]->cradius << endl;
            cout << "2 " << circle[co]->cx << endl;
            cout << "3 " << fabs(circle[1]->cy-circle[co]->cy) << endl;
            circle[co]->vis=0;
            score+=10;
        }
    }





}


/*GLuint loadImage1(string fileName) {
        GLuint tex_ID;

        tex_ID = SOIL_load_OGL_texture(
                fileName.c_str(),
                SOIL_LOAD_AUTO,
                SOIL_CREATE_NEW_ID,
                SOIL_FLAG_POWER_OF_TWO
                | SOIL_FLAG_MIPMAPS
                | SOIL_FLAG_MULTIPLY_ALPHA
                | SOIL_FLAG_COMPRESS_TO_DXT
                | SOIL_FLAG_DDS_LOAD_DIRECT
                | SOIL_FLAG_INVERT_Y
                );

        if( tex_ID > 0 ) {
                glEnable( GL_TEXTURE_2D );
                glBindTexture( GL_TEXTURE_2D, tex_ID );

                return tex_ID;
        }
        else {
                cout << "Bad image" << endl;
                return 0;
        }
}
*/
